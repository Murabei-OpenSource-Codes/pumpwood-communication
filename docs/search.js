window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pumpwood_communication", "modulename": "pumpwood_communication", "kind": "module", "doc": "<p>Facilitate communication with Pumpowood backend.</p>\n\n<p>This packages facilitates the communication with end-points with Pumpwood\npattern and helps with authentication.</p>\n\n<p>Source-code at Github:<br>\n<a href=\"https://github.com/Murabei-OpenSource-Codes/pumpwood-communication\">https://github.com/Murabei-OpenSource-Codes/pumpwood-communication</a></p>\n"}, {"fullname": "pumpwood_communication.airflow", "modulename": "pumpwood_communication.airflow", "kind": "module", "doc": "<p>MicroService class to comunicate with Airflow.</p>\n"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService", "kind": "class", "doc": "<p>Class to facilitate interaction with Airflow API.</p>\n"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.__init__", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.__init__", "kind": "function", "doc": "<p>Create new AirflowMicroService object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>server_url:</strong>  URL of the server that will be connected.</li>\n<li><strong>username:</strong>  Username that will be logged on.</li>\n<li><strong>password:</strong>  Variable to be converted to JSON and posted along.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>AirflowMicroService: New AirflowMicroService object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.init", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.init", "kind": "function", "doc": "<p>Init AirflowMicroService object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>server_url:</strong>  url of the server that will be connected.</li>\n<li><strong>username:</strong>  Username that will be logged on.</li>\n<li><strong>password:</strong>  Variable to be converted to JSON and posted along</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AirflowMicroServiceException:</strong>  If some of the argument is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.health_check", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.health_check", "kind": "function", "doc": "<p>Test connection to Airflow API.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AirflowMicroServiceException:</strong>  If it is not possible to list one\ndag using the API and return its error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.get_dag", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.get_dag", "kind": "function", "doc": "<p>Get Dag information using its dag_id.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag_id:</strong>  ID of the DAG to get information.</li>\n</ul>\n\n<p>Returns [dict]:\n    Return a dictionary with dag information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.list_dags", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.list_dags", "kind": "function", "doc": "<p>List all dags on Airflow.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>only_active:</strong>  List only active DAGs.</li>\n<li><strong>tags:</strong>  Filter DASs using tags.</li>\n<li><strong>max_results:</strong>  Limit query results.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">only_active</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">max_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">inf</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.run_dag", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.run_dag", "kind": "function", "doc": "<p>Run an Airflow DAG passing arguments as arguments.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag_id:</strong>  Dag id that will called.</li>\n<li><strong>arguments:</strong>  Dictionary with arguments to be passed to dag run on Airflow\nas conf.</li>\n<li><strong>paused_raise_error:</strong>  Raise error if DAG is paused or inactive at the moment it is\nasked to run.</li>\n</ul>\n\n<p>Return [dict]:\n    Return dictionary with dag run information.</p>\n\n<h6 id=\"raise\">Raise:</h6>\n\n<blockquote>\n  <p>AirflowMicroServiceException: If DAG not found.\n  AirflowMicroServiceException: If DAG is inactive.\n  AirflowMicroServiceException: If DAG paused and\n      paused_raise_error=True.\n  AirflowMicroServiceException: If other exception when asking DAG\n      to run on Airflow.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">paused_raise_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dag_run_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dag_run_id_sufix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.list_dag_runs", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.list_dag_runs", "kind": "function", "doc": "<p>List dag runs ordered inverted to creation time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag_id:</strong>  Id of the dag to list dag runs.</li>\n<li><strong>limit:</strong>  Limit the number of dag runs to be returned.</li>\n<li><strong>execution_date_gte:</strong>  Query parameters.</li>\n<li><strong>execution_date_lte:</strong>  Query parameters.</li>\n<li><strong>start_date_gte:</strong>  Query parameters.</li>\n<li><strong>start_date_lte:</strong>  Query parameters.</li>\n<li><strong>end_date_gte:</strong>  Query parameters.</li>\n<li><strong>end_date_lte:</strong>  Query parameters.</li>\n<li><strong>state:</strong>  Query parameters.</li>\n<li><strong>order_by:</strong>  Query parameters.</li>\n</ul>\n\n<p>Return [list]:\n    Return DAG run associated with ETLJob DAG.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">execution_date_gte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">execution_date_lte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_date_gte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_date_lte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_date_gte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_date_lte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-execution_date&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.get_dag_run", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.get_dag_run", "kind": "function", "doc": "<p>Get DAG run information.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag_id:</strong>  Identification of the DAG.</li>\n<li><strong>dag_run_id:</strong>  Identification of the DAG run.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<p>Return [dict]:\n    Serialized DAG run information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dag_run_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.cache", "modulename": "pumpwood_communication.cache", "kind": "module", "doc": "<p>Modules to manage a local disk cache for pumpwood requests.</p>\n"}, {"fullname": "pumpwood_communication.cache.PumpwoodCache", "modulename": "pumpwood_communication.cache", "qualname": "PumpwoodCache", "kind": "class", "doc": "<p>Class to implement local cache for Pumpwood Comunication requests.</p>\n"}, {"fullname": "pumpwood_communication.cache.PumpwoodCache.__init__", "modulename": "pumpwood_communication.cache", "qualname": "PumpwoodCache.__init__", "kind": "function", "doc": "<p>__init__.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pumpwood_communication.cache.PumpwoodCache.get", "modulename": "pumpwood_communication.cache", "qualname": "PumpwoodCache.get", "kind": "function", "doc": "<p>Get a value from cache.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hash_dict (dict):</strong>  A dictonary with information that will be used on hash.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the cached value or None if not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hash_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.cache.PumpwoodCache.set", "modulename": "pumpwood_communication.cache", "qualname": "PumpwoodCache.set", "kind": "function", "doc": "<p>Set cache value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hash_dict (dict):</strong>  A dictonary with information that will be used on hash.</li>\n<li><strong>value (Any):</strong>  Value that will be set on diskcache.</li>\n<li><strong>expire (int):</strong>  Number of seconds that will be considered as expirity time.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a boolean value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hash_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">expire</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.cache.<pumpwood_communication.cache.cache.PumpwoodCache object at 0x7844c9d96f30>", "modulename": "pumpwood_communication.cache", "qualname": "<pumpwood_communication.cache.cache.PumpwoodCache object at 0x7844c9d96f30>", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.exceptions", "modulename": "pumpwood_communication.exceptions", "kind": "module", "doc": "<p>Define PumpWood exceptions to be treated as API errors.</p>\n\n<p>Define especific errors for PumpWood plataform. These errors will be treated\nand will not result in default 500 errors</p>\n"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException", "kind": "class", "doc": "<p>Special exception used in Pumpowod Systems.</p>\n\n<p>It permits treatment of raises on applications serializing response\nusing to_dict function and return status code as <code>status_code</code>\nattribute value.</p>\n", "bases": "builtins.Exception"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.__init__", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message:</strong>  Message that will be formated using payload\ninformation using <code>{key}</code> to replace information.</li>\n<li><strong>payload:</strong>  Payload data passed as a dictionary, it will be returned\nin payload at <code>to_dict</code> funcion and used to format message.</li>\n<li><strong>status_code:</strong>  Change the default status code of the exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.status_code", "kind": "variable", "doc": "<p>PumpWoodException will return status 400 on Pumpwood backend.</p>\n", "annotation": ": int", "default_value": "400"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.message", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.message", "kind": "variable", "doc": "<p>Message associated with raise.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.payload", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.payload", "kind": "variable", "doc": "<p>Dictionary payload that will be returned by to_dict funcion and format\nmessage string.</p>\n", "annotation": ": dict"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.format_message", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.format_message", "kind": "function", "doc": "<p>Format exception message using payload data.</p>\n\n<p>Substitute placeholders at exception message with payload.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a string of message with placeholders substituted with\n  payload data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.to_dict", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.to_dict", "kind": "function", "doc": "<p>Serialize Exception object to return as reponse.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictionary with keys:</p>\n  \n  <ul>\n  <li><strong>payload [dict]:</strong> Payload associated with raise.</li>\n  <li><strong>type [str]:</strong> Return name of the class of the Exception.</li>\n  <li><strong>message_not_fmt [str]:</strong> Return msg without replacemnt of the\n  msg with payload information.</li>\n  <li><strong>message [str]:</strong> Return msg formated with payload information.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodDataLoadingException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodDataLoadingException", "kind": "class", "doc": "<p>Problem when loading data at dataloaders and to_load models.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodDatabaseError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodDatabaseError", "kind": "class", "doc": "<p>Errors raised by Postgres and not treated by other handlers.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodUniqueDatabaseError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodUniqueDatabaseError", "kind": "class", "doc": "<p>Unique errors raised by Postgres.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodDataTransformationException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodDataTransformationException", "kind": "class", "doc": "<p>Problem when transforming model data.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodWrongParameters", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodWrongParameters", "kind": "class", "doc": "<p>Raise for errors in object deserialization.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodObjectSavingException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodObjectSavingException", "kind": "class", "doc": "<p>Raise for errors in object deserialization.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodObjectDeleteException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodObjectDeleteException", "kind": "class", "doc": "<p>Raise for errors in object deserialization.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodActionArgsException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodActionArgsException", "kind": "class", "doc": "<p>Missing arguments to perform action.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodUnauthorized", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodUnauthorized", "kind": "class", "doc": "<p>User Unauthorized to perform action.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodUnauthorized.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodUnauthorized.status_code", "kind": "variable", "doc": "<p>PumpWoodException will return status 400 on Pumpwood backend.</p>\n", "default_value": "401"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodForbidden", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodForbidden", "kind": "class", "doc": "<p>Action not permited.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodForbidden.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodForbidden.status_code", "kind": "variable", "doc": "<p>PumpWoodException will return status 400 on Pumpwood backend.</p>\n", "default_value": "403"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodObjectDoesNotExist", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodObjectDoesNotExist", "kind": "class", "doc": "<p>Object not found in database.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodObjectDoesNotExist.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodObjectDoesNotExist.status_code", "kind": "variable", "doc": "<p>PumpWoodException will return status 400 on Pumpwood backend.</p>\n", "default_value": "404"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodQueryException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodQueryException", "kind": "class", "doc": "<p>Problem when querying data, like wrong fields or operators.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodIntegrityError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodIntegrityError", "kind": "class", "doc": "<p>Problem when saving data due to IntegrityError.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodNotImplementedError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodNotImplementedError", "kind": "class", "doc": "<p>Problem when saving data due to NotImplementedError.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodMicroserviceUnavailableError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodMicroserviceUnavailableError", "kind": "class", "doc": "<p>Problem when trying to use a microservice that was not deployied.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodMFAError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodMFAError", "kind": "class", "doc": "<p>Problem when using MFA.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodJSONLoadError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodJSONLoadError", "kind": "class", "doc": "<p>Problem loading json data from request.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException", "kind": "class", "doc": "<p>Other untreated error on server.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.__init__", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.__init__", "kind": "function", "doc": "<p>__init__.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.status_code", "kind": "variable", "doc": "<p>PumpWoodException will return status 400 on Pumpwood backend.</p>\n", "default_value": "500"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.message", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.message", "kind": "variable", "doc": "<p>Message associated with raise.</p>\n"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.payload", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.payload", "kind": "variable", "doc": "<p>Dictionary payload that will be returned by to_dict funcion and format\nmessage string.</p>\n"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.to_dict", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.to_dict", "kind": "function", "doc": "<p>Serialize exception to dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.exceptions.AirflowMicroServiceException", "modulename": "pumpwood_communication.exceptions", "qualname": "AirflowMicroServiceException", "kind": "class", "doc": "<p>Raises from AirflowMicroService.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.exceptions_dict", "modulename": "pumpwood_communication.exceptions", "qualname": "exceptions_dict", "kind": "variable", "doc": "<p>Dictionary used by backends/microservice to treat Pumpwood exceptions and\nre-raise them exception.</p>\n", "default_value": "{&#x27;PumpWoodException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodException&#x27;&gt;, &#x27;PumpWoodDataLoadingException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodDataLoadingException&#x27;&gt;, &#x27;PumpWoodDatabaseError&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodDatabaseError&#x27;&gt;, &#x27;PumpWoodDataTransformationException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodDataTransformationException&#x27;&gt;, &#x27;PumpWoodWrongParameters&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodWrongParameters&#x27;&gt;, &#x27;PumpWoodObjectSavingException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodObjectSavingException&#x27;&gt;, &#x27;PumpWoodObjectDeleteException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodObjectDeleteException&#x27;&gt;, &#x27;PumpWoodActionArgsException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodActionArgsException&#x27;&gt;, &#x27;PumpWoodUnauthorized&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodUnauthorized&#x27;&gt;, &#x27;PumpWoodForbidden&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodForbidden&#x27;&gt;, &#x27;PumpWoodObjectDoesNotExist&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodObjectDoesNotExist&#x27;&gt;, &#x27;PumpWoodQueryException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodQueryException&#x27;&gt;, &#x27;PumpWoodIntegrityError&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodIntegrityError&#x27;&gt;, &#x27;PumpWoodNotImplementedError&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodNotImplementedError&#x27;&gt;, &#x27;PumpWoodMicroserviceUnavailableError&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodMicroserviceUnavailableError&#x27;&gt;, &#x27;PumpWoodMFAError&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodMFAError&#x27;&gt;, &#x27;PumpWoodOtherException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodOtherException&#x27;&gt;, &#x27;AirflowMicroServiceException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.AirflowMicroServiceException&#x27;&gt;, &#x27;PumpWoodUniqueDatabaseError&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodUniqueDatabaseError&#x27;&gt;}"}, {"fullname": "pumpwood_communication.hash", "modulename": "pumpwood_communication.hash", "kind": "module", "doc": "<p>Create hash from a dictionary.</p>\n"}, {"fullname": "pumpwood_communication.hash.create_hash_from_dict", "modulename": "pumpwood_communication.hash", "qualname": "create_hash_from_dict", "kind": "function", "doc": "<p>Create a hash from a dictionary limiting keys used at <code>keys</code> arguments.</p>\n\n<p>Create hash from a dictionary, it adds <code>HASH_SALT</code> as salt at the\nbeginng of the string if <code>HASH_SALT</code> enviroment variable is present.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index_dict:</strong>  Dictionary with the index that will be used to generate\nthe hash value.</li>\n<li><strong>salt:</strong>  Salt text that will be concatenated to string before generating\nthe hash.</li>\n<li><strong>get_env:</strong>  If uses <code>HASH_SALT</code> enviroment variable as salt to create\nthe hash.</li>\n<li><strong>keys:</strong>  List of the keys of index_dict that will be used to generate\nhash.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a string with hash create using parameters passed at this\n  funcion.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">index_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">salt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">get_env</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.hash.create_hash_from_str", "modulename": "pumpwood_communication.hash", "qualname": "create_hash_from_str", "kind": "function", "doc": "<p>Create a hash for the index.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index:</strong>  String used to create the hash.</li>\n<li><strong>salt:</strong>  String to be used as salt to generate the hash.</li>\n<li><strong>get_env:</strong>  If enviroment variable <code>HASH_SALT</code> should be used\nto create a salt string,</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Hash string from parameters passed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">salt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">get_env</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc", "modulename": "pumpwood_communication.microservice_abc", "kind": "module", "doc": "<p>Facilitate communication with Pumpowood backend.</p>\n\n<p>This packages facilitates the communication with end-points with Pumpwood\npattern and helps with authentication.</p>\n\n<p>Source-code at Github:<br>\n<a href=\"https://github.com/Murabei-OpenSource-Codes/pumpwood-communication\">https://github.com/Murabei-OpenSource-Codes/pumpwood-communication</a></p>\n"}, {"fullname": "pumpwood_communication.microservice_abc.base", "modulename": "pumpwood_communication.microservice_abc.base", "kind": "module", "doc": "<p>Module with base classes for requests on Pumpwood Server.</p>\n"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase", "kind": "class", "doc": "<p>Base class for Pumpwood MicroService.</p>\n\n<p>Enviroment variables can be used to set MicroService parameters:</p>\n\n<ul>\n<li><strong>PUMPWOOD_COMUNICATION__DEFAULT_TIMEOUT:</strong> Default requests timeout in\nseconds.</li>\n<li><strong>PUMPWOOD_COMUNICATION__DEBUG:</strong> If object will be initiated using\ndebug parameter. It will have more verbosity and login at each\nrequest. Options 'TRUE', 'FALSE'.</li>\n<li><strong>PUMPWOOD_COMUNICATION__VERIFY_SSL:</strong> If requests will validate SSL\ncertificate.</li>\n</ul>\n"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.__init__", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.__init__", "kind": "function", "doc": "<p>Create new PumpWoodMicroService object.</p>\n\n<p>Creates a new microservice object. If just name is passed, object must\nbe initiate after with init() method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  Name of the microservice, helps when exceptions\nare raised.</li>\n<li><strong>server_url:</strong>  URL of the server that will be connected.</li>\n<li><strong>username:</strong>  Username that will be logged on.</li>\n<li><strong>password:</strong>  Variable to be converted to JSON and posted along\nwith the request.</li>\n<li><strong>verify_ssl:</strong>  Set if microservice will verify SSL certificate.</li>\n<li><strong>debug:</strong>  If microservice will be used as debug mode. This will obrigate\nauth token refresh for each call.</li>\n<li><strong>default_timeout:</strong>  Default timeout for Pumpwood calls.</li>\n<li><strong>**kwargs:</strong>  Other parameters used for compatibility between versions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PumpWoodMicroService: New PumpWoodMicroService object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular Raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verify_ssl</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.name", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.name", "kind": "variable", "doc": "<p>Name of the microservice instance.</p>\n"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.server_url", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.server_url", "kind": "variable", "doc": "<p>Pumpwood server URL.</p>\n"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.init", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.init", "kind": "function", "doc": "<p>Lazzy initialization of the MicroService of object.</p>\n\n<p>This function might be usefull to use the object as a singleton at\nthe backends. Using this function it is possible to instanciate an\nempty object and them set the attributes latter at the systems.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  Name of the microservice, helps when exceptions\nare raised.</li>\n<li><strong>server_url:</strong>  URL of the server that will be connected.</li>\n<li><strong>username:</strong>  Username that will be logged on.</li>\n<li><strong>password:</strong>  Variable to be converted to JSON and posted along\nwith the request.</li>\n<li><strong>verify_ssl:</strong>  Set if microservice will verify SSL certificate.</li>\n<li><strong>debug:</strong>  If microservice will be used as debug mode. This will obrigate\nauth token refresh for each call.</li>\n<li><strong>default_timeout:</strong>  Default timeout for Pumpwood calls.</li>\n<li><strong>**kwargs:</strong>  Other parameters used for compatibility between versions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular Raises</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verify_ssl</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.angular_json", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.angular_json", "kind": "function", "doc": "<p>Convert text to Json removing any XSSI at the beging of JSON.</p>\n\n<p>Some backends add <code>)]}',\\n</code> at the beginning of the JSON data to\nprevent injection of functions. This function remove this characters\nif present.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request_result:</strong>  JSON request to be converted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodJSONLoadError:</strong>  If it is not possible to load JSON from request data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request_result</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.time_to_expiry", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.time_to_expiry", "kind": "function", "doc": "<p>Return time to token expiry.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No Args.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return time until token expiration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timedeltas</span><span class=\"o\">.</span><span class=\"n\">Timedelta</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.is_credential_set", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.is_credential_set", "kind": "function", "doc": "<p>Check if username and password are set on object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No Args.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if usename and password were set during object creation or\n  later with init function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.is_invalid_token_response", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.is_invalid_token_response", "kind": "function", "doc": "<p>Check if reponse has invalid token error.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>response:</strong>  Request reponse to check for invalid token.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return True if response has an invalid token status.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Response</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.confirm_mfa_code", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.confirm_mfa_code", "kind": "function", "doc": "<p>Ask user to confirm MFA code to login.</p>\n\n<p>Open an input interface at terminal for user to validate MFA token.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mfa_login_data:</strong>  Result from login request with 'mfa_token'\nas key.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return login returned with MFA confimation.</p>\n</blockquote>\n\n<h6 id=\"raise\">Raise:</h6>\n\n<blockquote>\n  <p>Raise error if reponse is not valid using error_handler.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mfa_login_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.login", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.login", "kind": "function", "doc": "<p>Log microservice in using username and password provided.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>force_refresh (bool):</strong>  Force token refresh despise still valid\naccording to self.__token_expiry.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If login response has status diferent from 200.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force_refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.logout", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.logout", "kind": "function", "doc": "<p>Logout token.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>auth_header:</strong>  Authentication header.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if logout was ok.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.logout_all", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.logout_all", "kind": "function", "doc": "<p>Logout all tokens from user.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>auth_header (dict):</strong>  Authentication header.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if logout all was ok.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.get_auth_header", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.get_auth_header", "kind": "function", "doc": "<p>Retrieve auth_header and token_expiry from object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No Args.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return authorization header and token_expiry datetime from object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.error_handler", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.error_handler", "kind": "function", "doc": "<p>Handle request error.</p>\n\n<p>Check if is a Json and propagate the error with\nsame type if possible. If not Json raises the content.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>response:</strong>  response to be handled, it is a PumpWoodException\nreturn it will raise the same exception at microservice\nobject.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodOtherException:</strong>  If content-type is not application/json.</li>\n<li><strong>PumpWoodOtherException:</strong>  If content-type is application/json, but type not\npresent or not recognisable at <code>exceptions.exceptions_dict</code>.</li>\n<li><strong>Other PumpWoodException sub-types:</strong>  If content-type is application/json if type is present and\nrecognisable.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.request_post", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.request_post", "kind": "function", "doc": "<p>Make a POST a request to url with data as multipart/json payload.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url:</strong>  URL to make the request, already with server url.</li>\n<li><strong>data:</strong>  Data to be used as Json payload.</li>\n<li><strong>files:</strong>  A dictonary with file data, files will be set on field\ncorresponding.to dictonary key.\n<code>{'file1': open('file1', 'rb'), {'file2': open('file2', 'rb')}</code></li>\n<li><strong>parameters:</strong>  URL parameters.</li>\n<li><strong>auth_header:</strong>  AuthHeader to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the post response data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException sub-types:</strong>  Response is passed to error_handler.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.request_get", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.request_get", "kind": "function", "doc": "<p>Make a GET a request to url with data as JSON payload.</p>\n\n<p>Add the auth_header acording to login information and refresh token\nif auth_header=None and object token is expired.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url (str):</strong>  URL to make the request.</li>\n<li><strong>parameters (dict):</strong>  URL parameters to make the request.</li>\n<li><strong>auth_header (dict):</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>use_disk_cache (bool):</strong>  If set true, get request will use local cache to reduce\nthe requests to the backend.</li>\n<li><strong>disk_cache_expire (int):</strong>  Time in seconds to expire the cache, it None it will\nuse de default set be PumpwoodCache.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the post reponse data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException sub-types:</strong>  Raise exception if reponse is not 2XX and if 'type' key on\nJSON payload if found at exceptions_dict. Use the same\nexception, message and payload.</li>\n<li><strong>PumpWoodOtherException:</strong>  If exception type is not found or return is not a json.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_disk_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">disk_cache_expire</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.base.PumpWoodMicroServiceBase.request_delete", "modulename": "pumpwood_communication.microservice_abc.base", "qualname": "PumpWoodMicroServiceBase.request_delete", "kind": "function", "doc": "<p>Make a DELETE a request to url with data as Json payload.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url:</strong>  Url to make the request.</li>\n<li><strong>parameters:</strong>  Dictionary with Urls parameters.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the delete reponse payload.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException sub-types:</strong>  Raise exception if reponse is not 2XX and if 'type' key on\nJSON payload if found at exceptions_dict. Use the same\nexception, message and payload.</li>\n<li><strong>PumpWoodOtherException:</strong>  If exception type is not found or return is not a json.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.parallel", "modulename": "pumpwood_communication.microservice_abc.parallel", "kind": "module", "doc": "<p>Facilitate communication with Pumpowood backend.</p>\n\n<p>This packages facilitates the communication with end-points with Pumpwood\npattern and helps with authentication.</p>\n\n<p>Source-code at Github:<br>\n<a href=\"https://github.com/Murabei-OpenSource-Codes/pumpwood-communication\">https://github.com/Murabei-OpenSource-Codes/pumpwood-communication</a></p>\n"}, {"fullname": "pumpwood_communication.microservice_abc.parallel.retrieve", "modulename": "pumpwood_communication.microservice_abc.parallel.retrieve", "kind": "module", "doc": "<p>Module for parallel functions of microservice.</p>\n"}, {"fullname": "pumpwood_communication.microservice_abc.parallel.retrieve.ABCParalellRetriveMicroservice", "modulename": "pumpwood_communication.microservice_abc.parallel.retrieve", "qualname": "ABCParalellRetriveMicroservice", "kind": "class", "doc": "<p>Abstract class for parallel calls at Pumpwood end-points.</p>\n", "bases": "abc.ABC, pumpwood_communication.microservice_abc.base.base.PumpWoodMicroServiceBase"}, {"fullname": "pumpwood_communication.microservice_abc.simple", "modulename": "pumpwood_communication.microservice_abc.simple", "kind": "module", "doc": "<p>Facilitate communication with Pumpowood backend.</p>\n\n<p>This packages facilitates the communication with end-points with Pumpwood\npattern and helps with authentication.</p>\n\n<p>Source-code at Github:<br>\n<a href=\"https://github.com/Murabei-OpenSource-Codes/pumpwood-communication\">https://github.com/Murabei-OpenSource-Codes/pumpwood-communication</a></p>\n"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleBatchMicroservice", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleBatchMicroservice", "kind": "class", "doc": "<p>Abstract class for batch end-points.</p>\n", "bases": "abc.ABC, pumpwood_communication.microservice_abc.base.base.PumpWoodMicroServiceBase"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleBatchMicroservice.aggregate", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleBatchMicroservice.aggregate", "kind": "function", "doc": "<p>Save a list of objects with one request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class of the end-point that will be aggregated.</li>\n<li><strong>group_by (List[str]):</strong>  List of the fields that will be used on aggregation as\ngroup by.</li>\n<li><strong>agg (dict):</strong>  A dictionary with dictionary itens as <code>field</code> and <code>function</code>\nspecifing the field that will be aggregated using a function.</li>\n<li><strong>filter_dict (dict):</strong>  Filter that will be applied before the aggregation.</li>\n<li><strong>exclude_dict (dict):</strong>  Exclude clause that will be applied before the aggregation.</li>\n<li><strong>order_by (list):</strong>  Ordenation acording to grouping elements. It can be used\nfields created as keys of agg dictinary.</li>\n<li><strong>auth_header (dict):</strong>  Authentication header used to impersonation of user.</li>\n<li><strong>limit (int):</strong>  Limit number of returned row at aggregation query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a DataFrame with aggregation results.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">group_by</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCPermissionMicroservice", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCPermissionMicroservice", "kind": "class", "doc": "<p>Abstract class for permission checking at pumpwood.</p>\n", "bases": "abc.ABC, pumpwood_communication.microservice_abc.base.base.PumpWoodMicroServiceBase"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCPermissionMicroservice.check_if_logged", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCPermissionMicroservice.check_if_logged", "kind": "function", "doc": "<p>Check if user is logged.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>auth_header (dict):</strong>  = None\nAuthHeader to substitute the microservice original at\nrequest. If not passed, microservice object auth_header\nwill be used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return True if auth_header is looged and False if not</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCPermissionMicroservice.get_user_info", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCPermissionMicroservice.get_user_info", "kind": "function", "doc": "<p>Get user info.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>auth_header (dict):</strong>  = None\nAuthHeader to substitute the microservice original at\nrequest. If not passed, microservice object auth_header\nwill be used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A serialized user object with information of the logged user.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCPermissionMicroservice.check_permission", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCPermissionMicroservice.check_permission", "kind": "function", "doc": "<p>Get user info.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class associated to be checked for access.</li>\n<li><strong>end_point (str):</strong>  Name of the end-point that will be checked for permission. Ex.:\nretrieve, save, list, list-without-pag, ...</li>\n<li><strong>extra_arg (str):</strong>  Used on some end-points. On action end-point it is reponsible\nfor setting the action associated with the call.</li>\n<li><strong>allow_service_user:</strong>  str = None:</li>\n<li><strong>allow_external:</strong>  str = None:</li>\n<li><strong>auth_header (dict):</strong>  AuthHeader to substitute the microservice original at\nrequest. If not passed, microservice object auth_header\nwill be used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A serialized user object with information of the logged user.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">end_point</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">extra_arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_service_user</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_external</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleRetriveMicroservice", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleRetriveMicroservice", "kind": "class", "doc": "<p>Abstract class for parallel calls at Pumpwood end-points.</p>\n", "bases": "abc.ABC, pumpwood_communication.microservice_abc.base.base.PumpWoodMicroServiceBase"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleRetriveMicroservice.list_one", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleRetriveMicroservice.list_one", "kind": "function", "doc": "<p>Retrieve an object using list serializer (simple).</p>\n\n<p><strong># DEPRECTED #</strong> It is the same as retrieve using\n<code>default_fields: bool = True</code>, if possible migrate to retrieve\nfunction.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the end-point</li>\n<li><strong>pk:</strong>  Object pk</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>fields:</strong>  Set the fields to be returned by the list end-point.</li>\n<li><strong>default_fields:</strong>  Boolean, if true and fields arguments None will return the\ndefault fields set for list by the backend.</li>\n<li><strong>foreign_key_fields:</strong>  Return forenging key objects. It will return the fk\ncorresponding object. Ex: <code>created_by_id</code> reference to\na user <code>model_class</code> the correspondent to User will be\nreturned at <code>created_by</code>.</li>\n<li><strong>related_fields:</strong>  Return related fields objects. Related field objects are\nobjects that have a forenging key associated with this\nmodel_class, results will be returned as a list of\ndictionaries usually in a field with <code>_set</code> at end.\nReturning related_fields consume backend resorces, use\ncarefully.</li>\n<li><strong>use_disk_cache (bool):</strong>  If set true, get request will use local cache to reduce\nthe requests to the backend.</li>\n<li><strong>disk_cache_expire (int):</strong>  Time in seconds to expire the cache, it None it will\nuse de default set be PumpwoodCache.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return object with the correspondent pk.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  If pk not found on database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">related_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_disk_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">disk_cache_expire</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleRetriveMicroservice.retrieve", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleRetriveMicroservice.retrieve", "kind": "function", "doc": "<p>Retrieve an object from PumpWood.</p>\n\n<p>Function to get object serialized by retrieve end-point\n(more detailed data).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the end-point</li>\n<li><strong>pk:</strong>  Object pk</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>fields:</strong>  Set the fields to be returned by the list end-point.</li>\n<li><strong>default_fields:</strong>  Boolean, if true and fields arguments None will return the\ndefault fields set for list by the backend.</li>\n<li><strong>foreign_key_fields:</strong>  Return forenging key objects. It will return the fk\ncorresponding object. Ex: <code>created_by_id</code> reference to\na user <code>model_class</code> the correspondent to User will be\nreturned at <code>created_by</code>.</li>\n<li><strong>related_fields:</strong>  Return related fields objects. Related field objects are\nobjects that have a forenging key associated with this\nmodel_class, results will be returned as a list of\ndictionaries usually in a field with <code>_set</code> at end.\nReturning related_fields consume backend resorces, use\ncarefully.</li>\n<li><strong>use_disk_cache (bool):</strong>  If set true, get request will use local cache to reduce\nthe requests to the backend.</li>\n<li><strong>disk_cache_expire (int):</strong>  Time in seconds to expire the cache, it None it will\nuse de default set be PumpwoodCache.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return object with the correspondent pk.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  If pk not found on database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">related_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_disk_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">disk_cache_expire</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleRetriveMicroservice.retrieve_file", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleRetriveMicroservice.retrieve_file", "kind": "function", "doc": "<p>Retrieve a file from PumpWood.</p>\n\n<p>This function will retrieve file as a single request, depending on the\nsize of the files it would be preferred to use streaming end-point.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Class of the model to retrieve file.</li>\n<li><strong>pk:</strong>  Pk of the object associeted file.</li>\n<li><strong>file_field:</strong>  Field of the file to be downloaded.</li>\n<li><strong>auth_header:</strong>  Dictionary containing the auth header.</li>\n<li><strong>save_file:</strong>  If data is to be saved as file or return get\nresponse.</li>\n<li><strong>save_path:</strong>  Path of the directory to save file.</li>\n<li><strong>file_name:</strong>  Name of the file, if None it will have same name as\nsaved in PumpWood.</li>\n<li><strong>if_exists:</strong>  Values must be in {'fail', 'change_name', 'overwrite', 'skip'}.\nSet what to do if there is a file with same name. Skip\nwill not download file if there is already with same\nos.path.join(save_path, file_name), file_name must be set\nfor skip argument.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>May return the file name if save_file=True; If false will return\n  a dictonary with keys <code>filename</code> with original file name and\n  <code>content</code> with binary data of file content.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodForbidden:</strong>  'storage_object attribute not set for view, file operations\nare disable'. This indicates that storage for this backend\nwas not configured, so it is not possible to make storage\noperations,</li>\n<li><strong>PumpWoodForbidden:</strong>  'file_field must be set on self.file_fields dictionary'. This\nindicates that the <code>file_field</code> parameter is not listed as\na file field on the backend.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'field [{}] not found or null at object'. This indicates that\nthe file field requested is not present on object fields.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'Object not found in storage [{}]'. This indicates that the\nfile associated with file_field is not avaiable at the\nstorage. This should not ocorrur, it might have a manual\nupdate at the model_class table or manual removal/rename of\nfiles on storage.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_file</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleRetriveMicroservice.retrieve_streaming_file", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleRetriveMicroservice.retrieve_streaming_file", "kind": "function", "doc": "<p>Retrieve a file from PumpWood using streaming to retrieve content.</p>\n\n<p>This funcion uses file streaming to retrieve file content, it should be\nprefered when dealing with large (bigger than 10Mb) files transfer.\nUsing this end-point the file is not loaded on backend memory content\nis transfered by chucks that are read at the storage and transfered\nto user.</p>\n\n<p>It will necessarily save the content as a file, there is not the\npossibility of retrieving the content directly from request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Class of the model to retrieve file.</li>\n<li><strong>pk:</strong>  Pk of the object associeted file.</li>\n<li><strong>file_field:</strong>  Field of the file to be downloaded.</li>\n<li><strong>auth_header:</strong>  Dictionary containing the auth header.</li>\n<li><strong>save_path:</strong>  Path of the directory to save file.</li>\n<li><strong>file_name:</strong>  Name of the file, if None it will have same name as\nsaved in PumpWood.</li>\n<li><strong>if_exists:</strong>  Values must be in {'fail', 'change_name', 'overwrite'}.\nSet what to do if there is a file with same name.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Returns the file path that recived the file content.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodForbidden:</strong>  'storage_object attribute not set for view, file operations\nare disable'. This indicates that storage for this backend\nwas not configured, so it is not possible to make storage\noperations,</li>\n<li><strong>PumpWoodForbidden:</strong>  'file_field must be set on self.file_fields dictionary'. This\nindicates that the <code>file_field</code> parameter is not listed as\na file field on the backend.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'field [{}] not found or null at object'. This indicates that\nthe file field requested is not present on object fields.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'Object not found in storage [{}]'. This indicates that the\nfile associated with file_field is not avaiable at the\nstorage. This should not ocorrur, it might have a manual\nupdate at the model_class table or manual removal/rename of\nfiles on storage.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleDeleteMicroservice", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleDeleteMicroservice", "kind": "class", "doc": "<p>Abstract class for calls at Pumpwood delete end-points.</p>\n", "bases": "abc.ABC, pumpwood_communication.microservice_abc.base.base.PumpWoodMicroServiceBase"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleDeleteMicroservice.delete", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleDeleteMicroservice.delete", "kind": "function", "doc": "<p>Send delete request to a PumpWood object.</p>\n\n<p>Delete (or whatever the PumpWood system have been implemented) the\nobject with the specified pk.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to delete the object</li>\n<li><strong>pk:</strong>  Object pk to be deleted (or whatever the PumpWood system\nhave been implemented). Some model_class with 'deleted' field\ndoes not remove the entry, it will flag deleted=True at this\ncases. Model class with delete=True will be not retrieved\nby default on <code>list</code> and <code>list_without_pag</code> end-points.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Returns delete object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'Requested object {model_class}[{pk}] not found.' This\nindicates that the pk was not found in database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleDeleteMicroservice.delete_file", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleDeleteMicroservice.delete_file", "kind": "function", "doc": "<p>Send delete request to a PumpWood object.</p>\n\n<p>Delete (or whatever the PumpWood system have been implemented) the\nobject with the specified pk.</p>\n\n<p>At previous versions this function was <code>remove_file_field</code>. An alias\nis created for backward compatibility.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to delete the object</li>\n<li><strong>pk:</strong>  Object pk to be deleted (or whatever the PumpWood system\nhave been implemented).</li>\n<li><strong>file_field:</strong>  File field to be removed from storage.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return True is file was successful removed</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodForbidden:</strong>  'storage_object attribute not set for view, file operations\nare disable'. This indicates that storage_object is not\nassociated with view, not allowing it to make storage\noperations.</li>\n<li><strong>PumpWoodForbidden:</strong>  'file_field must be set on self.file_fields dictionary.'.\nThis indicates that the <code>file_field</code> was not set as a file\nfield on the backend.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'File does not exist. File field [{}] is set as None'.\nThis indicates that the object does not exists on storage,\nit should not occur. It might have been some manual update\nof the database or at the storage level.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleDeleteMicroservice.remove_file_field", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleDeleteMicroservice.remove_file_field", "kind": "function", "doc": "<p>Send delete request to a PumpWood object.</p>\n\n<p>Delete (or whatever the PumpWood system have been implemented) the\nobject with the specified pk.</p>\n\n<p>At previous versions this function was <code>remove_file_field</code>. An alias\nis created for backward compatibility.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to delete the object</li>\n<li><strong>pk:</strong>  Object pk to be deleted (or whatever the PumpWood system\nhave been implemented).</li>\n<li><strong>file_field:</strong>  File field to be removed from storage.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return True is file was successful removed</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodForbidden:</strong>  'storage_object attribute not set for view, file operations\nare disable'. This indicates that storage_object is not\nassociated with view, not allowing it to make storage\noperations.</li>\n<li><strong>PumpWoodForbidden:</strong>  'file_field must be set on self.file_fields dictionary.'.\nThis indicates that the <code>file_field</code> was not set as a file\nfield on the backend.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'File does not exist. File field [{}] is set as None'.\nThis indicates that the object does not exists on storage,\nit should not occur. It might have been some manual update\nof the database or at the storage level.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleDeleteMicroservice.delete_many", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleDeleteMicroservice.delete_many", "kind": "function", "doc": "<p>Remove many objects using query to retrict removal.</p>\n\n<p>CAUTION It is not possible to undo this operation, model_class\nthis deleted field will be removed from database when using this\nend-point, different from using delete end-point.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to delete the object</li>\n<li><strong>filter_dict:</strong>  Dictionary to make filter query.</li>\n<li><strong>exclude_dict:</strong>  Dictionary to make exclude query.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if delete is ok.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodObjectDeleteException:</strong>  Raises error if there is any error when commiting object\ndeletion on database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleSaveMicroservice", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleSaveMicroservice", "kind": "class", "doc": "<p>Abstract class for parallel calls at Pumpwood end-points.</p>\n", "bases": "abc.ABC, pumpwood_communication.microservice_abc.base.base.PumpWoodMicroServiceBase"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleSaveMicroservice.save", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleSaveMicroservice.save", "kind": "function", "doc": "<p>Save or Update a new object.</p>\n\n<p>Function to save or update a new model_class object. If obj_dict['pk']\nis None or not defined a new object will be created. The obj\nmodel class is defided at obj_dict['model_class'] and if not defined an\nPumpWoodObjectSavingException will be raised.</p>\n\n<p>If files argument is set, request will be transfered using a multipart\nrequest file files mapping file key to file field on backend.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj_dict:</strong>  Model data dictionary. It must have 'model_class'\nkey and if 'pk' key is not defined a new object will\nbe created, else object with pk will be updated.</li>\n<li><strong>files:</strong>  A dictionary of files to be added to as a multi-part\npost request. File must be passed as a file object with read\nbytes.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>fields:</strong>  Set the fields to be returned by the list end-point.</li>\n<li><strong>default_fields:</strong>  Boolean, if true and fields arguments None will return the\ndefault fields set for list by the backend.</li>\n<li><strong>foreign_key_fields:</strong>  Return forenging key objects. It will return the fk\ncorresponding object. Ex: <code>created_by_id</code> reference to\na user <code>model_class</code> the correspondent to User will be\nreturned at <code>created_by</code>.</li>\n<li><strong>related_fields:</strong>  Return related fields objects. Related field objects are\nobjects that have a forenging key associated with this\nmodel_class, results will be returned as a list of\ndictionaries usually in a field with <code>_set</code> at end.\nReturning related_fields consume backend resorces, use\ncarefully.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return updated/created object data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodObjectSavingException:</strong>  'To save an object obj_dict must have model_class defined.'\nThis indicates that the obj_dict must have key <code>model_class</code>\nindicating model class of the object that will be\nupdated/created.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'Requested object {model_class}[{pk}] not found.'. This\nindicates that the pk passed on obj_dict was not found on\nbackend database.</li>\n<li><strong>PumpWoodIntegrityError:</strong>  Error raised when IntegrityError is raised on database. This\nmight ocorrur when saving objects that does not respect\nuniqueness restriction on database or other IntegrityError\nlike removal of foreign keys with related data.</li>\n<li><strong>PumpWoodObjectSavingException:</strong>  Return error at object validation on de-serializing the\nobject or files with unexpected extensions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">obj_dict</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">related_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservice_abc.simple.ABCSimpleSaveMicroservice.save_streaming_file", "modulename": "pumpwood_communication.microservice_abc.simple", "qualname": "ABCSimpleSaveMicroservice.save_streaming_file", "kind": "function", "doc": "<p>Stream file to PumpWood.</p>\n\n<p>Use streaming to transfer a file content to Pumpwood storage, this\nend-point is prefered when transmiting files bigger than 10Mb. It\nis necessary to have the object created before the file transfer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the object.</li>\n<li><strong>pk:</strong>  pk of the object.</li>\n<li><strong>file_field:</strong>  File field that will receive file stream.</li>\n<li><strong>file:</strong>  File to upload as a file object with read bytes option.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>file_name:</strong>  Name of the file, if not set it will be saved as\n{pk}__{file_field}.{extension at permited extension}</li>\n<li><strong>fields:</strong>  Set the fields to be returned by the list end-point.</li>\n<li><strong>default_fields:</strong>  Boolean, if true and fields arguments None will return the\ndefault fields set for list by the backend.</li>\n<li><strong>foreign_key_fields:</strong>  Return forenging key objects. It will return the fk\ncorresponding object. Ex: <code>created_by_id</code> reference to\na user <code>model_class</code> the correspondent to User will be\nreturned at <code>created_by</code>.</li>\n<li><strong>related_fields:</strong>  Return related fields objects. Related field objects are\nobjects that have a forenging key associated with this\nmodel_class, results will be returned as a list of\ndictionaries usually in a field with <code>_set</code> at end.\nReturning related_fields consume backend resorces, use\ncarefully.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the file name associated with data at the storage.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodForbidden:</strong>  'file_field must be set on self.file_fields dictionary'. This\nindicates that the <code>file_field</code> passed is not associated\nwith a file field on the backend.</li>\n<li><strong>PumpWoodException:</strong>  'Saved bytes in streaming [{}] differ from file bytes [{}].'.\nThis indicates that there was an error when transfering data\nto storage, the file bytes and transfered bytes does not\nmatch.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BufferedReader</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">related_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices", "modulename": "pumpwood_communication.microservices", "kind": "module", "doc": "<p>Module microservice.py.</p>\n\n<p>Class and functions to help communication between PumpWood like systems.</p>\n"}, {"fullname": "pumpwood_communication.microservices.break_in_chunks", "modulename": "pumpwood_communication.microservices", "qualname": "break_in_chunks", "kind": "function", "doc": "<p>Break a dataframe in chunks of chunksize.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>df_to_break:</strong>  Dataframe to be break in chunks of <code>chunksize</code> size.</li>\n<li><strong>chunksize:</strong>  Length of each chuck of the breaks of <code>df_to_break</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a list dataframes with lenght chunksize of data from\n  <code>df_to_break</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df_to_break</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService", "kind": "class", "doc": "<p>Class to define an inter-pumpwood MicroService.</p>\n\n<p>Create an object ot help communication with Pumpwood based backends. It\nmanage login and token refresh if necessary.</p>\n\n<p>It also implements parallel functions that split requests in parallel\nprocess to reduce processing time.</p>\n", "bases": "pumpwood_communication.microservice_abc.simple.permission.ABCPermissionMicroservice, pumpwood_communication.microservice_abc.simple.batch.ABCSimpleBatchMicroservice, pumpwood_communication.microservice_abc.simple.retrieve.ABCSimpleRetriveMicroservice, pumpwood_communication.microservice_abc.simple.delete.ABCSimpleDeleteMicroservice, pumpwood_communication.microservice_abc.simple.save.ABCSimpleSaveMicroservice"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_registered_routes", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_registered_routes", "kind": "function", "doc": "<p>List routes that have been registed at Kong.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.is_microservice_registered", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.is_microservice_registered", "kind": "function", "doc": "<p>Check if a microservice (kong service) is registered at Kong.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>microservice (str):</strong>  Service associated with microservice registered on\nPumpwood Kong.</li>\n<li><strong>auth_header (dict):</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return true if microservice is registered.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">microservice</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_registered_endpoints", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_registered_endpoints", "kind": "function", "doc": "<p>List all routes and services that have been registed at Kong.</p>\n\n<p>It is possible to restrict the return to end-points that should be\navaiable at the frontend. Using this feature it is possibel to 'hide'\nservices from GUI keeping them avaiable for programatic calls.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>availability:</strong>  Set the availability that is associated with the service.\nSo far it is implemented 'front_avaiable' and 'all'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a list of serialized services objects containing the\n  routes associated with at <code>route_set</code>.</p>\n  \n  <p>Service and routes have <code>notes__verbose</code> and <code>description__verbose</code>\n  that are  the repective strings associated with note and\n  description but translated using Pumpwood's I8s,</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodWrongParameters:</strong>  Raise PumpWoodWrongParameters if availability passed as\nparaemter is not implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">availability</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;front_avaiable&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.dummy_call", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.dummy_call", "kind": "function", "doc": "<p>Return a dummy call to ensure headers and payload reaching app.</p>\n\n<p>The request just bounce on the server and return the headers and\npayload that reached the application. It is usefull for probing\nproxy servers, API gateways and other security and load balance\ntools.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>payload:</strong>  Payload to be returned by the dummy call end-point.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictonary with:</p>\n  \n  <ul>\n  <li><strong>full_path</strong>: Full path of the request.</li>\n  <li><strong>method</strong>: Method used at the call</li>\n  <li><strong>headers</strong>: Headers at the request.</li>\n  <li><strong>data</strong>: Post payload sent at the request.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.dummy_raise", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.dummy_raise", "kind": "function", "doc": "<p>Raise an Pumpwood error with the payload.</p>\n\n<p>This and point raises an Arbitrary PumpWoodException error, it can be\nused for debuging error treatment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exception_class:</strong>  Class of the exception to be raised.</li>\n<li><strong>exception_deep:</strong>  Deep of the exception in microservice calls. This arg will\nmake error recusive, calling the end-point it self for\n<code>exception_deep</code> time before raising the error.</li>\n<li><strong>payload:</strong>  Payload that will be returned with error.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Should not return any results, all possible call should result\n  in raising the correspondent error.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Should raise the correspondent error passed on exception_class</li>\n<li>arg, with payload.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">exception_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exception_deep</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.get_pks_from_unique_field", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.get_pks_from_unique_field", "kind": "function", "doc": "<p>Get pk using unique fields values.</p>\n\n<p>Use unique field values to retrieve pk of the objects. This end-point\nis usefull for retrieving pks of the objects associated with unique\nfields such as <code>description</code> (unique on most model of pumpwood).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Using description to fetch pks from objects</span>\n<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">data</span> <span class=\"k\">with</span> <span class=\"n\">unique</span> <span class=\"n\">description</span> <span class=\"n\">but</span> <span class=\"n\">without</span> <span class=\"n\">pk</span><span class=\"p\">]</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;attribute_id&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span><span class=\"o\">.</span><span class=\"n\">get_pks_from_unique_field</span><span class=\"p\">(</span>\n    <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;DescriptionAttribute&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;attribute&#39;</span><span class=\"p\">])[</span><span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Using a dimension key to fetch pk of the objects, dimension</span>\n<span class=\"c1\"># key must be unique</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;georea_id&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span><span class=\"o\">.</span><span class=\"n\">get_pks_from_unique_field</span><span class=\"p\">(</span>\n    <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;DescriptionGeoarea&quot;</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"s2\">&quot;dimension-&gt;city&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;city&#39;</span><span class=\"p\">])[</span><span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the objects.</li>\n<li><strong>field:</strong>  Unique field to fetch pk. It is possible to use dimension keys\nas unique field, for that use <code>dimension-&gt;[key]</code> notation.</li>\n<li><strong>values:</strong>  List of the unique fields used to fetch primary keys.</li>\n</ul>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Return a dataframe in same order as values with columns:</p>\n  \n  <ul>\n  <li><strong>pk</strong>: Correspondent primary key of the unique value.</li>\n  <li><strong>[field]</strong>: Column with same name of field argument,\n  correspondent to pk.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodQueryException:</strong>  Raises if field is not found on the model and it is note\nassociated with a dimension tag.</li>\n<li><strong>PumpWoodQueryException:</strong>  Raises if <code>field</code> does not have a unique restriction on\ndatabase. Dimension keys does not check for uniqueness on\ndatabase, be carefull not to duplicate the lines.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list", "kind": "function", "doc": "<p>List objects with pagination.</p>\n\n<p>List end-point (resumed data) of PumpWood like systems,\nresults will be paginated. To get next pag, send all recived pk at\nexclude dict (ex.: <code>exclude_dict={pk__in: [1,2,...,30]}</code>).</p>\n\n<p>It is possible to return foreign keys objects associated with\n<code>model_class</code>. Use this with carefull since increase the backend\ninfrastructure consumption, each object is a retrieve call per\nforeign key (otimization in progress).</p>\n\n<p>It is possible to use diferent operators using <code>__</code> after the name\nof the field, some of the operators avaiable:</p>\n\n<h3 id=\"general-operators\">General operators</h3>\n\n<ul>\n<li><strong>__eq:</strong> Check if the value is the same, same results if no\noperator is passed.</li>\n<li><strong>__gt:</strong> Check if value is greter then argument.</li>\n<li><strong>__lt:</strong> Check if value is less then argument.</li>\n<li><strong>__gte:</strong> Check if value is greter or equal then argument.</li>\n<li><strong>__lte:</strong> Check if value is less or equal then argument.</li>\n<li><strong>__in:</strong> Check if value is at a list, the argument of this operator\nmust be a list.</li>\n</ul>\n\n<h3 id=\"text-field-operators\">Text field operators</h3>\n\n<ul>\n<li><strong>__contains:</strong> Check if value contains a string. It is case and\naccent sensitive.</li>\n<li><strong>__icontains:</strong> Check if a values contains a string, It is case\ninsensitive and accent sensitive.</li>\n<li><strong>__unaccent_icontains:</strong> Check if a values contains a string, It is\ncase insensitive and accent insensitive (consider a, \u00e0, \u00e1, \u00e3, ...\nthe same).</li>\n<li><strong>__exact:</strong> Same as __eq or not setting operator.</li>\n<li><strong>__iexact:</strong> Same as __eq, but case insensitive and\naccent sensitive.</li>\n<li><strong>__unaccent_iexact:</strong> Same as __eq, but case insensitive and\naccent insensitive.</li>\n<li><strong>__startswith:</strong> Check if the value stats with a sub-string.\nCase sensitive and accent sensitive.</li>\n<li><strong>__istartswith:</strong> Check if the value stats with a sub-string.\nCase insensitive and accent sensitive.</li>\n<li><strong>__unaccent_istartswith:</strong> Check if the value stats with a\nsub-string. Case insensitive and accent insensitive.</li>\n<li><strong>__endswith:</strong> Check if the value ends with a sub-string. Case\nsensitive and accent sensitive.</li>\n<li><strong>__iendswith:</strong> Check if the value ends with a sub-string. Case\ninsensitive and accent sensitive.</li>\n<li><strong>__unaccent_iendswith:</strong> Check if the value ends with a sub-string.\nCase insensitive and accent insensitive.</li>\n</ul>\n\n<h3 id=\"null-operators\">Null operators</h3>\n\n<ul>\n<li><strong>__isnull:</strong> Check if field is null, it uses as argument a <code>boolean</code>\nvalue false will return all non NULL values and true will return\nNULL values.</li>\n</ul>\n\n<h3 id=\"date-and-datetime-operators\">Date and datetime operators:</h3>\n\n<ul>\n<li><strong>__range:</strong> Receive as argument a list of two elements and return\nobjects that field dates are between those values.</li>\n<li><strong>__year:</strong> Return object that date field value year is equal to\nargument.</li>\n<li><strong>__month:</strong> Return object that date field value month is equal to\nargument.</li>\n<li><strong>__day:</strong> Return object that date field value day is equal to\nargument.</li>\n</ul>\n\n<h3 id=\"dictionary-fields-operators\">Dictionary fields operators:</h3>\n\n<ul>\n<li><strong>__json_contained_by:</strong>\nUses the function <a href=\"https://docs.sqlalchemy.org/en/20/dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by\">contained_by</a>\nfrom SQLAlchemy to test if keys are a proper subset of the keys of\nthe argument jsonb expression (extracted from SQLAlchemy). The\nargument is a list.</li>\n<li><strong>__json_has_any:</strong>\nUses the function <a href=\"https://docs.sqlalchemy.org/en/20/dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any\">has_any</a>\nfrom SQLAlchemy to test for presence of a key. Note that the key\nmay be a SQLA expression. (extracted from SQLAlchemy). The\nargument is a list.</li>\n<li><strong>__json_has_key:</strong>\nUses the function <a href=\"https://docs.sqlalchemy.org/en/20/dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key\">has_key</a>\nfrom SQLAlchemy to Test for presence of a key. Note that the key\nmay be a SQLA expression. The argument is a str.</li>\n</ul>\n\n<h3 id=\"text-similarity-operators\">Text similarity operators</h3>\n\n<p>To use similariry querys on Postgres it is necessary to <code>pg_trgm</code> be\ninstaled on server. Check [oficial documentation]\n(https://www.postgresql.org/docs/current/pgtrgm.html).</p>\n\n<ul>\n<li><strong>__similarity:</strong> Check if two strings are similar uses the <code>%</code>\noperador.</li>\n<li><strong>__word_similar_left:</strong> Check if two strings are similar uses the\n<code>&lt;%</code> operador.</li>\n<li><strong>__word_similar_right:</strong> Check if two strings are similar uses the\n<code>%&gt;</code> operador.</li>\n<li><strong>__strict_word__similar_left:</strong> Check if two strings are similar\nuses the <code>&lt;&lt;%</code> operador.</li>\n<li><strong>__strict_word__similar_right:</strong> Check if two strings are similar\nuses the <code>%&gt;&gt;</code> operador.</li>\n</ul>\n\n<p>Some usage examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Return the first 3 results ordered decreasing acording to `time` and</span>\n<span class=\"c1\"># them ordered by `modeling_unit_id`. Results must have time greater</span>\n<span class=\"c1\"># or equal to 2017-01-01 and less or equal to 2017-06-01. It also</span>\n<span class=\"c1\"># must have attribute_id equal to 6 and not contains modeling_unit_id</span>\n<span class=\"c1\"># 3 or 4.</span>\n<span class=\"n\">microservice</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span>\n    <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;DatabaseVariable&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">filter_dict</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">&quot;time__gte&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2017-01-01 00:00:00&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;time__lte&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2017-06-01 00:00:00&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;attribute_id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">},</span>\n    <span class=\"n\">exclude_dict</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">&quot;modeling_unit_id__in&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>\n    <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;-time&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;modeling_unit_id&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;model_class&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;time&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;modeling_unit_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Return all elements that dimensions field has a key type with</span>\n<span class=\"c1\"># value contains `selling` insensitive to case and accent.</span>\n<span class=\"n\">microservice</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span>\n    <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;DatabaseAttribute&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">filter_dict</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">&quot;dimensions-&gt;type__unaccent_icontains&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;selling&quot;</span><span class=\"p\">})</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the end-point</li>\n<li><strong>filter_dict:</strong>  Filter dict to be used at the query. Filter elements from query\nreturn that satifies all statements of the dictonary.</li>\n<li><strong>exclude_dict:</strong>  Exclude dict to be used at the query. Remove elements from\nquery return that satifies all statements of the dictonary.</li>\n<li><strong>order_by:</strong>  Order results acording to list of strings\ncorrespondent to fields. It is possible to use '-' at the\nbegginng of the field name for reverse ordering. Ex.:\n['description'] for accendent ordering and ['-description']\nfor descendent ordering.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>fields (list):</strong>  Set the fields to be returned by the list end-point.</li>\n<li><strong>default_fields (bool):</strong>  Boolean, if true and fields arguments None will return the\ndefault fields set for list by the backend.</li>\n<li><strong>limit (int):</strong>  Set the limit of elements of the returned query. By default,\nbackend usually return 50 elements.</li>\n<li><strong>foreign_key_fields (bool):</strong>  Return forenging key objects. It will return the fk\ncorresponding object. Ex: <code>created_by_id</code> reference to\na user <code>model_class</code> the correspondent to User will be\nreturned at <code>created_by</code>.</li>\n<li><strong>**kwargs:</strong>  Other parameters for compatibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Containing objects serialized by list Serializer.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_by_chunks", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_by_chunks", "kind": "function", "doc": "<p>List object fetching them by chucks using pk to paginate.</p>\n\n<p>List data by chunck to load by datasets without breaking the backend\nor receive server timeout. It load chunks orderring the results using\nid of the tables, it can be changed but it should be unique otherwise\nunexpected results may occur.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the end-point</li>\n<li><strong>filter_dict:</strong>  Filter dict to be used at the query. Filter elements from query\nreturn that satifies all statements of the dictonary.</li>\n<li><strong>exclude_dict:</strong>  Exclude dict to be used at the query. Remove elements from\nquery return that satifies all statements of the dictonary.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>fields:</strong>  Set the fields to be returned by the list end-point.</li>\n<li><strong>default_fields:</strong>  Boolean, if true and fields arguments None will return the\ndefault fields set for list by the backend.</li>\n<li><strong>chunk_size:</strong>  Number of objects to be fetched each query.</li>\n<li><strong>**kwargs:</strong>  Other parameters for compatibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Containing objects serialized by list Serializer.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50000</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_without_pag", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_without_pag", "kind": "function", "doc": "<p>List object without pagination.</p>\n\n<p>Function to post at list end-point (resumed data) of PumpWood like\nsystems, results won't be paginated.\n<strong>Be carefull with large returns.</strong></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class of the end-point</li>\n<li><strong>filter_dict (dict):</strong>  Filter dict to be used at the query. Filter elements from query\nreturn that satifies all statements of the dictonary.</li>\n<li><strong>exclude_dict (dict):</strong>  Exclude dict to be used at the query. Remove elements from\nquery return that satifies all statements of the dictonary.</li>\n<li><strong>order_by (bool):</strong>  Order results acording to list of strings\ncorrespondent to fields. It is possible to use '-' at the\nbegginng of the field name for reverse ordering. Ex.:\n['description'] for accendent ordering and ['-description']\nfor descendent ordering.</li>\n<li><strong>auth_header (dict):</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>fields (List[str]):</strong>  Set the fields to be returned by the list end-point.</li>\n<li><strong>default_fields (bool):</strong>  Boolean, if true and fields arguments None will return the\ndefault fields set for list by the backend.</li>\n<li><strong>limit (int):</strong>  Set the limit of elements of the returned query. By default,\nbackend usually return 50 elements.</li>\n<li><strong>foreign_key_fields (bool):</strong>  Return forenging key objects. It will return the fk\ncorresponding object. Ex: <code>created_by_id</code> reference to\na user <code>model_class</code> the correspondent to User will be\nreturned at <code>created_by</code>.</li>\n<li><strong>convert_geometry (bool):</strong>  If geometry columns should be convert to shapely geometry.\nFields with key 'geometry' will be considered geometry.</li>\n<li><strong>return_type (str):</strong>  Set return type to list of dictinary <code>list</code> or to a pandas\ndataframe <code>dataframe</code>.</li>\n<li><strong>**kwargs:</strong>  Other unused arguments for compatibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Containing objects serialized by list Serializer.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;list&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">convert_geometry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_dimensions", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_dimensions", "kind": "function", "doc": "<p>List dimensions avaiable for model_class.</p>\n\n<p>It list all keys avaiable at dimension retricting the results with\nquery parameters <code>filter_dict</code> and <code>exclude_dict</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the end-point</li>\n<li><strong>filter_dict:</strong>  Filter dict to be used at the query. Filter elements from query\nreturn that satifies all statements of the dictonary.</li>\n<li><strong>exclude_dict:</strong>  Exclude dict to be used at the query. Remove elements from\nquery return that satifies all statements of the dictonary.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of keys avaiable in results from the query dict.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_dimension_values", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_dimension_values", "kind": "function", "doc": "<p>List values associated with dimensions key.</p>\n\n<p>It list all keys avaiable at dimension retricting the results with\nquery parameters <code>filter_dict</code> and <code>exclude_dict</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the end-point</li>\n<li><strong>filter_dict:</strong>  Filter dict to be used at the query. Filter elements from query\nreturn that satifies all statements of the dictonary.</li>\n<li><strong>exclude_dict:</strong>  Exclude dict to be used at the query. Remove elements from\nquery return that satifies all statements of the dictonary.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>key:</strong>  Key to list the avaiable values using the query filter\nand exclude.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of values associated with dimensions key at the objects that\n  are returned with <code>filter_dict</code> and <code>exclude_dict</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_actions", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_actions", "kind": "function", "doc": "<p>Return a list of all actions avaiable at this model class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to list possible actions.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of possible actions and its descriptions.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular errors.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.execute_action", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.execute_action", "kind": "function", "doc": "<p>Execute action associated with a model class.</p>\n\n<p>If action is static or classfunction no pk is necessary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pk (int):</strong>  PK of the object to run action at. If not set action will be\nconsidered a classmethod and will run over the class.</li>\n<li><strong>model_class:</strong>  Model class to run action the object</li>\n<li><strong>action:</strong>  Action that will be performed.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>parameters:</strong>  Dictionary with the function parameters.</li>\n<li><strong>files:</strong>  A dictionary of files to be added to as a multi-part\npost request. File must be passed as a file object with read\nbytes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictonary with keys:</p>\n  \n  <ul>\n  <li><strong>result:</strong>: Result of the action that was performed.</li>\n  <li><strong>action:</strong>: Information of the action that was performed.</li>\n  <li><strong>parameters:</strong> Parameters that were passed to perform the\n  action.</li>\n  <li><strong>object:</strong> If a pk was passed to execute and action (not\n  classmethod or staticmethod), the object with the correspondent\n  pk is returned.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'There is no method {action} in rest actions for {class_name}'.\nThis indicates that action requested is not associated with\nthe model_class.</li>\n<li><strong>PumpWoodActionArgsException:</strong>  'Function is not static and pk is Null'. This indicate that\nthe action solicitated is not static/class method and a pk\nwas not passed as argument.</li>\n<li><strong>PumpWoodActionArgsException:</strong>  'Function is static and pk is not Null'. This indicate that\nthe action solicitated is static/class method and a pk\nwas passed as argument.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'Requested object {model_class}[{pk}] not found.'. This\nindicate that pk associated with model class was not found\non database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.search_options", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.search_options", "kind": "function", "doc": "<p>Return search options.</p>\n\n<p>DEPRECTED Use <code>list_options</code> function instead.</p>\n\n<p>Return information of the fields including avaiable options for\noptions fields and model associated with the foreign key.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to check search parameters</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictonary with field names as keys and information of\n  them as values. Information at values:</p>\n  \n  <ul>\n  <li><strong>primary_key [bool]:</strong>: Boolean indicating if field is part\n  of model_class primary key.</li>\n  <li><strong>column [str]:</strong>: Name of the column.</li>\n  <li><strong>column__verbose [str]:</strong> Name of the column translated using\n  Pumpwood I8s.</li>\n  <li><strong>help_text [str]:</strong> Help text associated with column.</li>\n  <li><strong>help_text__verbose [str]:</strong> Help text associated with column\n  translated using Pumpwood I8s.</li>\n  <li><strong>type [str]:</strong> Python type associated with the column.</li>\n  <li><strong>nullable [bool]:</strong> If field can be set as null (None).</li>\n  <li><strong>read_only [bool]:</strong> If field is marked as read-only. Passsing\n  information for this field will not be used in save end-point.</li>\n  <li><strong>default [any]:</strong> Default value of the field if not set using\n  save end-poin.</li>\n  <li><strong>unique [bool]:</strong> If the there is a constrain in database\n  setting this field to be unique.</li>\n  <li><strong>extra_info:</strong> Some extra infomations used to pass associated\n  model class for forenging key and related fields.</li>\n  <li><strong>in [dict]:</strong> At options fields, have their options listed in\n  <code>in</code> keys. It will return the values as key and de description\n  and description__verbose (translated by Pumpwood I8s)\n  as values.</li>\n  <li><strong>partition:</strong> At pk field, this key indicates if the database\n  if partitioned. Partitioned will perform better in queries if\n  partition is used on filter or exclude clauses. If table has\n  more than one level o partition, at least the first one must\n  be used when retrieving data.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.fill_options", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.fill_options", "kind": "function", "doc": "<p>Return options for object fields.</p>\n\n<p>DEPRECTED Use <code>fill_validation</code> function instead.</p>\n\n<p>This function send partial object data and return options to finish\nobject fillment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to check search parameters</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>parcial_obj_dict:</strong>  Partial object that is sent to backend for validation and\nupdate fill options acording to values passed for each field.</li>\n<li><strong>field:</strong>  Retrict validation for an especific field if implemented.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictonary with field names as keys and information of\n  them as values. Information at values:</p>\n  \n  <ul>\n  <li><strong>primary_key [bool]:</strong>: Boolean indicating if field is part\n  of model_class primary key.</li>\n  <li><strong>column [str]:</strong>: Name of the column.</li>\n  <li><strong>column__verbose [str]:</strong> Name of the column translated using\n  Pumpwood I8s.</li>\n  <li><strong>help_text [str]:</strong> Help text associated with column.</li>\n  <li><strong>help_text__verbose [str]:</strong> Help text associated with column\n  translated using Pumpwood I8s.</li>\n  <li><strong>type [str]:</strong> Python type associated with the column.</li>\n  <li><strong>nullable [bool]:</strong> If field can be set as null (None).</li>\n  <li><strong>read_only [bool]:</strong> If field is marked as read-only. Passsing\n  information for this field will not be used in save end-point.</li>\n  <li><strong>default [any]:</strong> Default value of the field if not set using\n  save end-poin.</li>\n  <li><strong>unique [bool]:</strong> If the there is a constrain in database\n  setting this field to be unique.</li>\n  <li><strong>extra_info:</strong> Some extra infomations used to pass associated\n  model class for forenging key and related fields.</li>\n  <li><strong>in [dict]:</strong> At options fields, have their options listed in\n  <code>in</code> keys. It will return the values as key and de description\n  and description__verbose (translated by Pumpwood I8s)\n  as values.</li>\n  <li><strong>partition:</strong> At pk field, this key indicates if the database\n  if partitioned. Partitioned will perform better in queries if\n  partition is used on filter or exclude clauses. If table has\n  more than one level o partition, at least the first one must\n  be used when retrieving data.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span>,</span><span class=\"param\">\t<span class=\"n\">parcial_obj_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_options", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_options", "kind": "function", "doc": "<p>Return options to render list views.</p>\n\n<p>This function send partial object data and return options to finish\nobject fillment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to check search parameters.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dictionary with keys:</p>\n  \n  <ul>\n  <li><strong>default_list_fields:</strong> Default list field defined on the\n  application backend.</li>\n  <li><strong>field_descriptions:</strong> Description of the fields associated\n  with the model class.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.retrieve_options", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.retrieve_options", "kind": "function", "doc": "<p>Return options to render retrieve views.</p>\n\n<p>Return information of the field sets that can be used to create\nfrontend site. It also return a <code>verbose_field</code> which can be used\nto create the tittle of the page substituing the values with\ninformation of the object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to check search parameters.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictinary with keys:</p>\n  \n  <ul>\n  <li><strong>verbose_field:</strong> String sugesting how the tittle of the\n  retrieve might be created. It will use Python format\n  information ex.: <code>'{pk} | {description}'</code>.</li>\n  <li><strong>fieldset:</strong> An dictinary with organization of data,\n  setting field sets that could be grouped toguether in\n  tabs.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.fill_validation", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.fill_validation", "kind": "function", "doc": "<p>Return options for object fields.</p>\n\n<p>This function send partial object data and return options to finish\nobject fillment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class to check search parameters.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>parcial_obj_dict:</strong>  Partial object data to be validated by the backend.</li>\n<li><strong>field:</strong>  Set an especific field to be validated if implemented.</li>\n<li><strong>user_type:</strong>  Set the type of user is requesting fill validation. It is\npossible to set <code>api</code> and <code>gui</code>. Gui user_type will return\nfields listed in gui_readonly as read-only fields to\nfacilitate navegation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictinary with keys:</p>\n  \n  <ul>\n  <li><strong>field_descriptions:</strong> Same of fill_options, but setting as\n  read_only=True fields listed on gui_readonly if\n  user_type='gui'.</li>\n  <li><strong>gui_readonly:</strong> Return a list of fields that will be\n  considered as read-only if user_type='gui' is requested.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parcial_obj_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">user_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;api&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.pivot", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.pivot", "kind": "function", "doc": "<p>Pivot object data acording to columns specified.</p>\n\n<p>Pivoting per-se is not usually used, beeing the name of the function\na legacy. Normality data transformation is done at the client level.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to check search parameters.</li>\n<li><strong>columns (List[str]):</strong>  List of fields to be used as columns when pivoting the data.</li>\n<li><strong>format (str):</strong>  Format to be used to convert pandas.DataFrame to\ndictionary, must be in ['dict','list','series',\n'split', 'records','index'].</li>\n<li><strong>filter_dict (dict):</strong>  Same as list function.</li>\n<li><strong>exclude_dict (dict):</strong>  Same as list function.</li>\n<li><strong>order_by (List[str]):</strong>  Same as list function.</li>\n<li><strong>variables (List[str]):</strong>  List of the fields to be returned, if None, the default\nvariables will be returned. Same as fields on list functions.</li>\n<li><strong>show_deleted (bool):</strong>  Fields with deleted column will have objects with deleted=True\nomited from results. show_deleted=True will return this\ninformation.</li>\n<li><strong>add_pk_column (bool):</strong>  If add pk values of the objects at pivot results. Adding\npk key on pivot end-points won't be possible to pivot since\npk is unique for each entry.</li>\n<li><strong>auth_header (dict):</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>as_dataframe (bool):</strong>  If results should be returned as a dataframe.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a list or a dictinary depending on the format set on\n  format parameter.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'Columns must be a list of elements.'. Indicates that the list\nargument was not a list.</li>\n<li><strong>PumpWoodException:</strong>  'Column chosen as pivot is not at model variables'. Indicates\nthat columns that were set to pivot are not present on model\nvariables.</li>\n<li><strong>PumpWoodException:</strong>  \"Format must be in ['dict','list','series','split',\n'records','index']\". Indicates that format set as paramenter\nis not implemented.</li>\n<li><strong>PumpWoodException:</strong>  \"Can not add pk column and pivot information\". If\nadd_pk_column is True (results will have the pk column), it is\nnot possible to pivot the information (pk is an unique value\nfor each object, there is no reason to pivot it).</li>\n<li><strong>PumpWoodException:</strong>  \"'value' column not at melted data, it is not possible\nto pivot dataframe.\". Indicates that data does not have a value\ncolumn, it must have it to populate pivoted table.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;list&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_deleted</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">add_pk_column</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">as_dataframe</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">],</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.flat_list_by_chunks", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.flat_list_by_chunks", "kind": "function", "doc": "<p>Incrementally fetch data from pivot end-point.</p>\n\n<p>Fetch data from pivot end-point paginating by id of chunk_size lenght.</p>\n\n<p>If table is partitioned it will split the query acording to partition\nto facilitate query at the database.</p>\n\n<p>If start_date and end_date are set, also breaks the query by month\nretrieving each month data in parallel.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to be pivoted.</li>\n<li><strong>filter_dict (dict):</strong>  Dictionary to to be used in objects.filter argument\n(Same as list end-point).</li>\n<li><strong>exclude_dict (dict):</strong>  Dictionary to to be used in objects.exclude argument\n(Same as list end-point).</li>\n<li><strong>fields (List[str] | None):</strong>  List of the variables to be returned,\nif None, the default variables will be returned.\nIf fields is set, dataframe will return that columns\neven if data is empty.</li>\n<li><strong>start_date (datetime | str):</strong>  Set a begin date for the query. If begin and end date are\nset, query will be splited with chucks by month that will be\nrequested in parallel.</li>\n<li><strong>end_date (datetime | str):</strong>  Set a end date for the query. If begin and end date are\nset, query will be splited with chucks by month that will be\nrequested in parallel.</li>\n<li><strong>show_deleted (bool):</strong>  If deleted data should be returned.</li>\n<li><strong>auth_header (dict):</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>chunk_size (int):</strong>  Limit of data to fetch per call.</li>\n<li><strong>n_parallel (int):</strong>  Number of parallel process to perform.</li>\n<li><strong>create_composite_pk (bool):</strong>  If true and table has a composite pk, it will create pk\nvalue based on the hash on the json serialized dictionary\nof the components of the primary key.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Returns a dataframe with all information fetched.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_deleted</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">create_composite_pk</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.bulk_save", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.bulk_save", "kind": "function", "doc": "<p>Save a list of objects with one request.</p>\n\n<p>It is used with a unique call save many objects at the same time. It\nis necessary that the end-point is able to receive bulk save requests\nand all objects been of the same model class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Data model class.</li>\n<li><strong>data_to_save:</strong>  A list of objects to be saved.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictinary with <code>saved_count</code> as key indicating the number of\n  objects that were saved in database.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'Expected columns and data columns do not match: Expected\ncolumns: {expected} Data columns: {data_cols}'. Indicates\nthat the expected fields of the object were not met at the\nobjects passed to save.</li>\n<li><strong>PumpWoodException:</strong>  Other sqlalchemy and psycopg2 errors not associated with\nIntegrityError.</li>\n<li><strong>PumpWoodException:</strong>  'Bulk save not avaiable.'. Indicates that Bulk save end-point\nwas not configured for this model_class.</li>\n<li><strong>PumpWoodIntegrityError:</strong>  Raise integrity errors from sqlalchemy and psycopg2. Usually\nassociated with uniqueness of some column.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_to_save</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.flatten_parallel", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.flatten_parallel", "kind": "function", "doc": "<p>Concat all parallel return to one list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parallel_result:</strong>  A list of lists to be flated (concatenate\nall lists into one).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list with all sub list itens.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parallel_result</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_request_get", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_request_get", "kind": "function", "doc": "<p>Make [n_parallel] parallel get requests.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>urls_list:</strong>  List of urls to make get requests.</li>\n<li><strong>parameters:</strong>  A list of dictionary or a dictionary that will be replicated\nlen(urls_list) and passed to parallel request as url\nparameter. If not set, empty dictionary will be passed to all\nrequest as default.</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a list with all get request reponses. The results are\n  on the same order of argument list.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'lenght of urls_list[{}] is different of parameters[{}]'.\nIndicates that the function arguments <code>urls_list</code> and\n<code>parameters</code> (when passed as a list of dictionaries)\ndoes not have de same lenght.</li>\n<li><strong>PumpWoodNotImplementedError:</strong>  'paraemters type[{}] is not implemented'. Indicates that\n<code>parameters</code> passed as function argument is not a list of dict\nor a dictinary, so not implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">urls_list</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.paralell_request_post", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.paralell_request_post", "kind": "function", "doc": "<p>Make [n_parallel] parallel post request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>urls_list:</strong>  List of urls to make get requests.</li>\n<li><strong>data_list:</strong>  List of data to be used as post payloads.</li>\n<li><strong>parameters:</strong>  URL paramenters to make the post requests.</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the post request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">urls_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">data_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.paralell_request_delete", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.paralell_request_delete", "kind": "function", "doc": "<p>Make [n_parallel] parallel delete request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>urls_list:</strong>  List of urls to make get requests.</li>\n<li><strong>parameters:</strong>  URL paramenters to make the post requests.</li>\n<li><strong>n_parallel (int):</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the get request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">urls_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_retrieve", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_retrieve", "kind": "function", "doc": "<p>Make [n_parallel] parallel retrieve request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model Class to retrieve.</li>\n<li><strong>list_pk:</strong>  List of the pks to retrieve.</li>\n<li><strong>fields:</strong>  Set the fields to be returned by the list end-point.</li>\n<li><strong>default_fields:</strong>  Boolean, if true and fields arguments None will return the\ndefault fields set for list by the backend.</li>\n<li><strong>foreign_key_fields:</strong>  Return forenging key objects. It will return the fk\ncorresponding object. Ex: <code>created_by_id</code> reference to\na user <code>model_class</code> the correspondent to User will be\nreturned at <code>created_by</code>.</li>\n<li><strong>related_fields:</strong>  Return related fields objects. Related field objects are\nobjects that have a forenging key associated with this\nmodel_class, results will be returned as a list of\ndictionaries usually in a field with <code>_set</code> at end.\nReturning related_fields consume backend resorces, use\ncarefully.</li>\n<li><strong>n_parallel (int):</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the retrieve request data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'len(model_class)[{}] != len(list_pk)[{}]'. Indicates that\nthe lenght of the arguments model_class and list_pk are\nincompatible.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_pk</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">related_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_retrieve_file", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_retrieve_file", "kind": "function", "doc": "<p>Make many [n_parallel] retrieve request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model Class to retrieve.</li>\n<li><strong>list_pk:</strong>  List of the pks to retrieve.</li>\n<li><strong>file_field:</strong>  Indicates the file field to download from.</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>save_path:</strong>  Path to be used to save files.</li>\n<li><strong>save_file:</strong>  True save file locally, False return file content as bites.</li>\n<li><strong>list_file_name:</strong>  Set a file name for each file download.</li>\n<li><strong>if_exists:</strong>  Set how treat when a file will be saved\nand there is another at same path. \"fail\" will raise an error;\n\"overwrite\" will overwrite the file with the new one; \"skip\"\nwhen list_file_name is set, check before downloaded it file\nalready exists, if so skip the download.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the retrieve file request data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'Lenght of list_file_name and list_pk are not equal:\nlen(list_file_name)={list_file_name}; len(list_pk)={list_pk}'.\nIndicates that len(list_file_name) and len(list_pk) function\narguments are not equal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">list_pk</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_file</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">list_file_name</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_list", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_list", "kind": "function", "doc": "<p>Make [n_parallel] parallel list request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model Class to retrieve.</li>\n<li><strong>list_args (List[dict]):</strong>  A list of list request args (filter_dict,\nexclude_dict, order_by, fields, default_fields, limit,\nforeign_key_fields).</li>\n<li><strong>n_parallel (int):</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header (dict):</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n<li><strong>fields (List[str]):</strong>  Set the fields to be returned by the list end-point.</li>\n<li><strong>default_fields (bool):</strong>  Boolean, if true and fields arguments None will return the\ndefault fields set for list by the backend.</li>\n<li><strong>limit (int):</strong>  Set the limit of elements of the returned query. By default,\nbackend usually return 50 elements.</li>\n<li><strong>foreign_key_fields (bool):</strong>  Return forenging key objects. It will return the fk\ncorresponding object. Ex: <code>created_by_id</code> reference to\na user <code>model_class</code> the correspondent to User will be\nreturned at <code>created_by</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Flatten List of the list request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'len(model_class)[{}] != len(list_args)[{}]'. Indicates that\nlenght of model_class and list_args arguments are not equal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_list_without_pag", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_list_without_pag", "kind": "function", "doc": "<p>Make [n_parallel] parallel list_without_pag request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model Class to retrieve.</li>\n<li><strong>list_args:</strong>  A list of list request args (filter_dict,\nexclude_dict, order_by, fields, default_fields, limit,\nforeign_key_fields).</li>\n<li><strong>n_parallel (int):</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Flatten List of the list request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'len(model_class)[{}] != len(list_args)[{}]'. Indicates that\nlenght of model_class and list_args arguments are not equal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_list_one", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_list_one", "kind": "function", "doc": "<p>Make [n_parallel] parallel list_one request.</p>\n\n<p>DEPRECTED user retrieve call with default_fields=True.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model Class to list one.</li>\n<li><strong>list_pk:</strong>  List of the pks to list one.</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the list_one request data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'len(model_class) != len(list_pk)'. Indicates that lenght\nof model_class and list_pk arguments are not equal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_pk</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_save", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_save", "kind": "function", "doc": "<p>Make [n_parallel] parallel save requests.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>list_obj_dict:</strong>  List of dictionaries containing PumpWood objects\n(must have at least 'model_class' key).</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the save request data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">list_obj_dict</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_delete", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_delete", "kind": "function", "doc": "<p>Make many [n_parallel] delete requests.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model Class to list one.</li>\n<li><strong>list_pk:</strong>  List of the pks to list one.</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the delete request data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'len(model_class)[{}] != len(list_args)[{}]'. Indicates\nthat length of model_class and list_args arguments are not\nequal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_pk</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_delete_many", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_delete_many", "kind": "function", "doc": "<p>Make [n_parallel] parallel delete_many request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model Class to delete many.</li>\n<li><strong>list_args (list):</strong>  A list of list request args (filter_dict, exclude_dict).</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the delete many request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'len(model_class)[{}] != len(list_args)[{}]'. Indicates\nthat length of model_class and list_args arguments\nare not equal.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_execute_action", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_execute_action", "kind": "function", "doc": "<p>Make [n_parallel] parallel execute_action requests.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model Class to perform action over,\nor a list of model class o make diferent actions.</li>\n<li><strong>pk:</strong>  A list of the pks to perform action or a\nsingle pk to perform action with different paraemters.</li>\n<li><strong>action:</strong>  A list of actions to perform or a single\naction to perform over all pks and parameters.</li>\n<li><strong>parameters:</strong>  Parameters used to perform actions\nor a single dict to be used in all actions.</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the execute_action request data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'parallel_length != len([argument])'. Indicates that function\narguments does not have all the same lenght.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_bulk_save", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_bulk_save", "kind": "function", "doc": "<p>Break data_to_save in many parallel bulk_save requests.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the data that will be saved.</li>\n<li><strong>data_to_save:</strong>  Data that will be saved</li>\n<li><strong>chunksize:</strong>  Length of each parallel bulk save chunk.</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the responses of bulk_save.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_to_save</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_pivot", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_pivot", "kind": "function", "doc": "<p>Make [n_parallel] parallel pivot request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model Class to retrieve.</li>\n<li><strong>list_args:</strong>  A list of list request args (filter_dict,exclude_dict,\norder_by).</li>\n<li><strong>columns:</strong>  List of columns at the pivoted table.</li>\n<li><strong>format:</strong>  Format of returned table. See pandas.DataFrame\nto_dict args.</li>\n<li><strong>n_parallel:</strong>  Number of simultaneus get requests, if not set\nget from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\nnot set then 4 will be considered.</li>\n<li><strong>variables:</strong>  Restrict the fields that will be returned at the query.</li>\n<li><strong>show_deleted:</strong>  If results should include data with deleted=True. This will\nbe ignored if model class does not have deleted field.</li>\n<li><strong>auth_header:</strong>  Auth header to substitute the microservice original\nat the request (user impersonation).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of the pivot request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">list_args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_deleted</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.get_queue_matrix", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.get_queue_matrix", "kind": "function", "doc": "<p>Download model queue estimation matrix. In development...</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">queue_pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_as_excel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.misc", "modulename": "pumpwood_communication.misc", "kind": "module", "doc": "<p>Miscelaneus function to help in development.</p>\n"}, {"fullname": "pumpwood_communication.misc.unpack_dict_columns", "modulename": "pumpwood_communication.misc", "qualname": "unpack_dict_columns", "kind": "function", "doc": "<p>Unpack dictinary columns at a dataframe.</p>\n\n<p>Return a copy of the dataframe with 'columns' unpacked and removed\nfrom result.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>df (pd.DataFrame):</strong>  Dataframe to unpack the columns.</li>\n<li><strong>columns (List[str]):</strong>  List of columns to unpack in columns.</li>\n</ul>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Return a dataframe with dict columns unpacked.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.misc.extract_dict_subset", "modulename": "pumpwood_communication.misc", "qualname": "extract_dict_subset", "kind": "function", "doc": "<p>Extract a subset of data from dictonary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict):</strong>  Dictionary data from which the subset will be extracted.</li>\n<li><strong>keys (List[str]):</strong>  Keys that will be extracted.</li>\n<li><strong>raise_not_present (str):</strong>  Control if an erros should be raised when key is not present.\n<ul>\n<li>'raise': Raise error</li>\n<li>'ignore': Does not return the missing key on function result.</li>\n<li>'add_none': Return key with None value.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictonary with a copy of subset of the keys of original\n  dictonary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">raise_not_present</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;raise&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;add_none&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;raise&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers", "modulename": "pumpwood_communication.serializers", "kind": "module", "doc": "<p>Miscellaneous to help with serializers in communication.</p>\n"}, {"fullname": "pumpwood_communication.serializers.default_encoder", "modulename": "pumpwood_communication.serializers", "qualname": "default_encoder", "kind": "function", "doc": "<p>Serialize complex objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers.PumpWoodJSONEncoder", "modulename": "pumpwood_communication.serializers", "qualname": "PumpWoodJSONEncoder", "kind": "class", "doc": "<p>PumpWood default serializer.</p>\n\n<p>Treat not simple python types to facilitate at serialization of\npandas, numpy, data, datetime and other data types.</p>\n", "bases": "simplejson.encoder.JSONEncoder"}, {"fullname": "pumpwood_communication.serializers.PumpWoodJSONEncoder.default", "modulename": "pumpwood_communication.serializers", "qualname": "PumpWoodJSONEncoder.default", "kind": "function", "doc": "<p>Serialize complex objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers.pumpJsonDump", "modulename": "pumpwood_communication.serializers", "qualname": "pumpJsonDump", "kind": "function", "doc": "<p>Dump a Json to python object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (any):</strong>  Object to be serialized using PumpWoodJSONEncoder encoder.</li>\n<li><strong>sort_keys (bool):</strong>  If json serialized data should have its keys sorted. This option\nmakes serialization return of data reproductable.</li>\n<li><strong>indent (int):</strong>  Pass indent argument to simplejson dumps.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sort_keys</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers.CompositePkBase64Converter", "modulename": "pumpwood_communication.serializers", "qualname": "CompositePkBase64Converter", "kind": "class", "doc": "<p>Convert composite primary keys in base64 dictionary.</p>\n"}, {"fullname": "pumpwood_communication.serializers.CompositePkBase64Converter.get_attribute", "modulename": "pumpwood_communication.serializers", "qualname": "CompositePkBase64Converter.get_attribute", "kind": "function", "doc": "<p>Get attribute from object or dictinary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj (Any):</strong>  Object or a dictinary.</li>\n<li><strong>att (str):</strong>  Name of the attribute/key that will be used to return\nthe value.</li>\n</ul>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Return object/dictionary value associated with attribute.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">att</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers.CompositePkBase64Converter.dump", "modulename": "pumpwood_communication.serializers", "qualname": "CompositePkBase64Converter.dump", "kind": "function", "doc": "<p>Convert primary keys and composite to a single value.</p>\n\n<p>Treat cases when more than one column are used as primary keys,\nat this cases, a base64 used on url serialization of the dictionary\nis returned.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj:</strong>  SQLAlchemy object.</li>\n<li><strong>primary_keys (Union[str, List[str], Dict[str, str]):</strong>  As string, a list or a dictionary leading to different\nbehaviour.\n<ul>\n<li><strong>str:</strong> It will return the value associated with object\nattribute.</li>\n<li><strong>List[str]:</strong> If list has lenght equal to 1, it will have\nsame behaviour as str. If greater than 1, it will be\nreturned a base64 encoded dictionary with the keys at\nprimary_keys.</li>\n<li><strong>Dict[str, str]:</strong> Dictionary to map object fields to\nother keys. This is usefull when querying related fields\nby composite forenging keys to match original data fieds.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>If the primary key is unique, return the value of the primary\n  key, if is have more than one column as primary key, return\n  a dictionary of the primary keys encoded as base64 url safe.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">primary_keys</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers.CompositePkBase64Converter.load", "modulename": "pumpwood_communication.serializers", "qualname": "CompositePkBase64Converter.load", "kind": "function", "doc": "<p>Convert encoded primary keys to values.</p>\n\n<p>If the primary key is a string, try to transform it to dictionary\ndecoding json base64 to a dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  Primary key value as an integer or as a base64\nencoded json dictionary.</li>\n</ul>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Return the primary key as integer if possible, or try to decoded\n  it to a dictionary from a base64 encoded json.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();