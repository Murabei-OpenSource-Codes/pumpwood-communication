window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pumpwood_communication", "modulename": "pumpwood_communication", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.airflow", "modulename": "pumpwood_communication.airflow", "kind": "module", "doc": "<p>MicroService class to comunicate with Airflow.</p>\n"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService", "kind": "class", "doc": "<p>Class to facilitate interaction with Airflow API.</p>\n"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.__init__", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.__init__", "kind": "function", "doc": "<p>Create new AirflowMicroService object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args. Object can be created and arguments set after.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>server_url (str): url of the server that will be connected.\n  username (str): Username that will be logged on.\n  password (str): Variable to be converted to JSON and posted along</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>AirflowMicroService: New AirflowMicroService object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.init", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.init", "kind": "function", "doc": "<p>Init AirflowMicroService object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>server_url (str):</strong>  url of the server that will be connected.</li>\n<li><strong>username (str):</strong>  Username that will be logged on.</li>\n<li><strong>password (str):</strong>  Variable to be converted to JSON and posted along</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AirflowMicroServiceException:</strong>  If some of the argument is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.health_check", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.health_check", "kind": "function", "doc": "<p>Test connection to Airflow API.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No kwargs.</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>No return</p>\n</blockquote>\n\n<h6 id=\"raise\">Raise:</h6>\n\n<blockquote>\n  <p>AirflowMicroServiceException: If it is not possible to list one\n      dag using the API and return its error.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.get_dag", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.get_dag", "kind": "function", "doc": "<p>Get Dag information using its dag_id.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag_id [str]:</strong>  ID of the DAG to get information.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No kwargs.</p>\n</blockquote>\n\n<p>Return [dict]:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.list_dags", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.list_dags", "kind": "function", "doc": "<p>List all dags on Airflow.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No Args.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>only_active [bool]: List only active DAGs.\n  tags [List[str]]: Filter DASs using tags.\n  max_results [int]: Limit query results.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">only_active</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">max_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">inf</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.run_dag", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.run_dag", "kind": "function", "doc": "<p>Run an Airflow DAG passing arguments as arguments.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag_id [str]:</strong>  Dag id that will called.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>arguments [dict]: Dictionary with arguments to be passed to dag\n      run on Airflow as conf.\n  paused_raise_error [bool]: Raise error if DAG is paused or inactive\n      at the moment it is asked to run.</p>\n</blockquote>\n\n<p>Return [dict]:\n    Return dictionary with dag run information.</p>\n\n<h6 id=\"raise\">Raise:</h6>\n\n<blockquote>\n  <p>AirflowMicroServiceException: If DAG not found.\n  AirflowMicroServiceException: If DAG is inactive.\n  AirflowMicroServiceException: If DAG paused and\n      paused_raise_error=True.\n  AirflowMicroServiceException: If other exception when asking DAG\n      to run on Airflow.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">paused_raise_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dag_run_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dag_run_id_sufix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.list_dag_runs", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.list_dag_runs", "kind": "function", "doc": "<p>List dag runs ordered inverted to creation time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag_id [str]:</strong>  Id of the dag to list dag runs.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>limit [int]: Limit the number of dag runs to be returned.\n  execution_date_gte [str]: Query parameters.\n  execution_date_lte [str]: Query parameters.\n  start_date_gte [str]: Query parameters.\n  start_date_lte [str]: Query parameters.\n  end_date_gte [str]: Query parameters.\n  end_date_lte [str]: Query parameters.\n  state [str]: Query parameters.\n  order_by [str]: Query parameters.</p>\n</blockquote>\n\n<p>Return [list]:\n    Return DAG run associated with ETLJob DAG.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">execution_date_gte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">execution_date_lte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_date_gte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_date_lte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_date_gte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_date_lte</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-execution_date&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.airflow.AirflowMicroService.get_dag_run", "modulename": "pumpwood_communication.airflow", "qualname": "AirflowMicroService.get_dag_run", "kind": "function", "doc": "<p>Get DAG run information.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag_id [str]:</strong>  Identification of the DAG.</li>\n<li><strong>dag_run_id [str]:</strong>  Identification of the DAG run.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<p>Return [dict]:\n    Serialized DAG run information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dag_run_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.exceptions", "modulename": "pumpwood_communication.exceptions", "kind": "module", "doc": "<p>Define PumpWood exceptions to be treated as API errors.</p>\n\n<p>Define especific errors for PumpWood plataform. These errors will be treated\nand will not result in default 500 errors</p>\n"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.__init__", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.status_code", "kind": "variable", "doc": "<p></p>\n", "default_value": "400"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.message", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.payload", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.payload", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodException.to_dict", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodException.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodDataLoadingException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodDataLoadingException", "kind": "class", "doc": "<p>Problem when loading data at dataloaders and to_load models.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodDatabaseError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodDatabaseError", "kind": "class", "doc": "<p>Errors raised by Postgres and not treated by other handlers.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodDataTransformationException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodDataTransformationException", "kind": "class", "doc": "<p>Problem when transforming model data.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodWrongParameters", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodWrongParameters", "kind": "class", "doc": "<p>Raise for errors in object deserialization.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodObjectSavingException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodObjectSavingException", "kind": "class", "doc": "<p>Raise for errors in object deserialization.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodObjectDeleteException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodObjectDeleteException", "kind": "class", "doc": "<p>Raise for errors in object deserialization.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodActionArgsException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodActionArgsException", "kind": "class", "doc": "<p>Missing arguments to perform action.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodUnauthorized", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodUnauthorized", "kind": "class", "doc": "<p>User Unauthorized to perform action.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodUnauthorized.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodUnauthorized.status_code", "kind": "variable", "doc": "<p></p>\n", "default_value": "401"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodForbidden", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodForbidden", "kind": "class", "doc": "<p>Action not permited.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodForbidden.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodForbidden.status_code", "kind": "variable", "doc": "<p></p>\n", "default_value": "403"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodObjectDoesNotExist", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodObjectDoesNotExist", "kind": "class", "doc": "<p>Object not found in database.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodObjectDoesNotExist.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodObjectDoesNotExist.status_code", "kind": "variable", "doc": "<p></p>\n", "default_value": "404"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodQueryException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodQueryException", "kind": "class", "doc": "<p>Problem when querying data, like wrong fields or operators.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodIntegrityError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodIntegrityError", "kind": "class", "doc": "<p>Problem when saving data due to IntegrityError.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodNotImplementedError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodNotImplementedError", "kind": "class", "doc": "<p>Problem when saving data due to NotImplementedError.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodMicroserviceUnavailableError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodMicroserviceUnavailableError", "kind": "class", "doc": "<p>Problem when trying to use a microservice that was not deployied.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodMFAError", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodMFAError", "kind": "class", "doc": "<p>Problem when using MFA.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException", "kind": "class", "doc": "<p>Problem when saving data due to NotImplementedError.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.__init__", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.status_code", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.status_code", "kind": "variable", "doc": "<p></p>\n", "default_value": "500"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.message", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.payload", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.payload", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.exceptions.PumpWoodOtherException.to_dict", "modulename": "pumpwood_communication.exceptions", "qualname": "PumpWoodOtherException.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.exceptions.AirflowMicroServiceException", "modulename": "pumpwood_communication.exceptions", "qualname": "AirflowMicroServiceException", "kind": "class", "doc": "<p>Raises from AirflowMicroService.</p>\n", "bases": "PumpWoodException"}, {"fullname": "pumpwood_communication.exceptions.exceptions_dict", "modulename": "pumpwood_communication.exceptions", "qualname": "exceptions_dict", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;PumpWoodException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodException&#x27;&gt;, &#x27;PumpWoodDataLoadingException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodDataLoadingException&#x27;&gt;, &#x27;PumpWoodDataTransformationException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodDataTransformationException&#x27;&gt;, &#x27;PumpWoodObjectSavingException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodObjectSavingException&#x27;&gt;, &#x27;PumpWoodActionArgsException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodActionArgsException&#x27;&gt;, &#x27;PumpWoodUnauthorized&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodUnauthorized&#x27;&gt;, &#x27;PumpWoodForbidden&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodForbidden&#x27;&gt;, &#x27;PumpWoodObjectDoesNotExist&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodObjectDoesNotExist&#x27;&gt;, &#x27;PumpWoodQueryException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodQueryException&#x27;&gt;, &#x27;PumpWoodIntegrityError&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodIntegrityError&#x27;&gt;, &#x27;PumpWoodWrongParameters&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodWrongParameters&#x27;&gt;, &#x27;PumpWoodNotImplementedError&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodNotImplementedError&#x27;&gt;, &#x27;PumpWoodOtherException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodOtherException&#x27;&gt;, &#x27;PumpWoodObjectDeleteException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodObjectDeleteException&#x27;&gt;, &#x27;AirflowMicroServiceException&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.AirflowMicroServiceException&#x27;&gt;, &#x27;PumpWoodMicroserviceUnavailableError&#x27;: &lt;class &#x27;pumpwood_communication.exceptions.PumpWoodMicroserviceUnavailableError&#x27;&gt;}"}, {"fullname": "pumpwood_communication.hash", "modulename": "pumpwood_communication.hash", "kind": "module", "doc": "<p>Create hash from a dictionary.</p>\n"}, {"fullname": "pumpwood_communication.hash.create_hash_from_dict", "modulename": "pumpwood_communication.hash", "qualname": "create_hash_from_dict", "kind": "function", "doc": "<p>Create a hash for the index.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">index_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">salt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">get_env</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.hash.create_hash_from_str", "modulename": "pumpwood_communication.hash", "qualname": "create_hash_from_str", "kind": "function", "doc": "<p>Create a hash for the index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">salt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">get_env</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices", "modulename": "pumpwood_communication.microservices", "kind": "module", "doc": "<p>Module microservice.py.</p>\n\n<p>Class and functions to help communication between PumpWood like systems.</p>\n"}, {"fullname": "pumpwood_communication.microservices.Log_Format", "modulename": "pumpwood_communication.microservices", "qualname": "Log_Format", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;%(levelname)s %(asctime)s - %(message)s&#x27;"}, {"fullname": "pumpwood_communication.microservices.microservice_logger", "modulename": "pumpwood_communication.microservices", "qualname": "microservice_logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger pumpwood_comunication (INFO)&gt;"}, {"fullname": "pumpwood_communication.microservices.break_in_chunks", "modulename": "pumpwood_communication.microservices", "qualname": "break_in_chunks", "kind": "function", "doc": "<p>Break a dataframe in chunks of chunksize.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_to_break</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService", "kind": "class", "doc": "<p>Class to define an inter-pumpwood MicroService.</p>\n"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.__init__", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.__init__", "kind": "function", "doc": "<p>Create new PumpWoodMicroService object.</p>\n\n<p>Creates a new microservice object. If just name is passed, object must\nbe initiate after with init() method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the microservice, helps when exceptions\nare raised.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>server_url (str): url of the server that will be connected.\n  username (str): Username that will be logged on.\n  password (str): Variable to be converted to JSON and posted along\n  with the request\n  verify_ssl (bool): Set if microservice will verify ssl certificate</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PumpWoodMicroService: New PumpWoodMicroService object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular Raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verify_ssl</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">auth_suffix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.name", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.server_url", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.server_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.verify_ssl", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.verify_ssl", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.auth_suffix", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.auth_suffix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.debug", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.is_mfa_login", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.is_mfa_login", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.init", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.init", "kind": "function", "doc": "<p>Start a microservice after creation.</p>\n\n<p>Usefull in flask app config.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the microservice, helps when exceptions\nare raised.</li>\n<li><strong>server_url (str):</strong>  url of the server that will be connected.</li>\n<li><strong>user_name (str):</strong>  Username that will be logged on.</li>\n<li><strong>password (str):</strong>  Variable to be converted to JSON and posted along</li>\n<li>with the request</li>\n<li><strong>verify_ssl (bool):</strong>  Set if microservice will verify ssl certificate</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_suffix (str): Add a suffix to auth end-point in case of\n      authentication end-point have any suffix.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular Raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">verify_ssl</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">auth_suffix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.angular_json", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.angular_json", "kind": "function", "doc": "<p>Convert text to Json removing any XSSI at the beging of JSON.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request_result (Request):</strong>  JSON Request to be converted</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular Raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request_result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.time_to_expiry", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.time_to_expiry", "kind": "function", "doc": "<p>Return time to token expiry.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No Args.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Return time until token expiration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timedeltas</span><span class=\"o\">.</span><span class=\"n\">Timedelta</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.is_credential_set", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.is_credential_set", "kind": "function", "doc": "<p>Check if username and password are set on object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No Args.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>True if usename and password were set during object creation or\n  later with init function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.login", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.login", "kind": "function", "doc": "<p>Log microservice in using username and password provided.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No Args.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>force_refresh [bool]: Force token refresh despise still valid\n      according to self.__token_expiry.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If login response has status diferent from 200.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force_refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.confirm_mfa_code", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.confirm_mfa_code", "kind": "function", "doc": "<p>Ask user to confirm MFA code to login.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mfa_login_data [dict]:</strong>  Result from login request with 'mfa_token'\nas key.</li>\n</ul>\n\n<p>Return [dict]:\n    Return login returned with MFA confimation.</p>\n\n<h6 id=\"raise\">Raise:</h6>\n\n<blockquote>\n  <p>Raise error if reponse is not valid.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mfa_login_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.logout", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.logout", "kind": "function", "doc": "<p>Logout token.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n\n<h6 id=\"kwards\">Kwards:</h6>\n\n<blockquote>\n  <p>auth_header [dict] Authentication header.</p>\n</blockquote>\n\n<p>Return [bool]:\n    True if logout was ok.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.logout_all", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.logout_all", "kind": "function", "doc": "<p>Logout all tokens from user.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n\n<h6 id=\"kwards\">Kwards:</h6>\n\n<blockquote>\n  <p>auth_header [dict] Authentication header.</p>\n</blockquote>\n\n<p>Return [bool]:\n    True if logout all was ok.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.set_auth_header", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.set_auth_header", "kind": "function", "doc": "<p>Set auth_header and token_expiry date.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>auth_header [dict]:</strong>  Authentication header to be set.</li>\n<li><strong>token_expiry [pd.Timestamp]:</strong>  Token expiry datetime to be set.</li>\n</ul>\n\n<p>Return [None]:\n    No return.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">token_expiry</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timestamps</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.get_auth_header", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.get_auth_header", "kind": "function", "doc": "<p>Retrieve auth_header and token_expiry from object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No Args.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Return authorization header and token_expiry datetime from object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.check_if_logged", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.check_if_logged", "kind": "function", "doc": "<p>Check if user is logged.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>auth_header (dict):</strong>  AuthHeader to substitute the\nmicroservice original</li>\n</ul>\n\n<p>Return [bool]:\n    Return True if auth_header is looged and False if not</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.get_user_info", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.get_user_info", "kind": "function", "doc": "<p>Get user info.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>No Args:</strong> </li>\n</ul>\n\n<p>Return [dict]:\n    A serialized user object with information of the logged user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.error_handler", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.error_handler", "kind": "function", "doc": "<p>Handle request error.</p>\n\n<p>Check if is a Json and propagate the error with\nsame type if possible. If not Json raises the content.</p>\n\n<h6 id=\"arg\">Arg:</h6>\n\n<blockquote>\n  <p>response (Response): response to be handled.</p>\n</blockquote>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No kwargs.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>No return.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If content-type is not application/json.</li>\n<li><strong>Exception:</strong>  If content-type is application/json, but type not\npresent or not recognisable.</li>\n<li><strong>Other Exception:</strong>  If content-type is application/json if type is\npresent and recognisable.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.is_invalid_token_response", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.is_invalid_token_response", "kind": "function", "doc": "<p>Check if reponse has invalid token error.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>response [requests.models.Response]:</strong>  Request reponse to check for\ninvalid token.</li>\n</ul>\n\n<p>Return [bool]:\n    Return True if response has an invalid token status.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Response</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.request_post", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.request_post", "kind": "function", "doc": "<p>Make a POST a request to url with data as Json payload.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url (str):</strong>  Url to make the request.</li>\n<li>data (any); Data to be used as Json payload.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>files(list of tuples): A list of tuples with\n                         (file name, [file1, file2, ...]).\n  params [dict]: Url parameters.\n  auth_header(dict): Auth data to overhide microservice's.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>any: Return the post result</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Response is passed to error_handler function.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.request_get", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.request_get", "kind": "function", "doc": "<p>Make a GET a request to url with data as Json payload.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url (str):</strong>  Url to make the request.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>parameters (dict): Url parameters to make the request.\n  auth_header (dict): Authentication dictionary.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>any: Return the post result</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Response is passed to error_handler function.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.request_delete", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.request_delete", "kind": "function", "doc": "<p>Make a DELETE a request to url with data as Json payload.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url (str):</strong>  Url to make the request.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>parameters (dict): Dictionary with Urls parameters.\n  auth_header (dict): Auth header if microservice not logged.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>any: Return the post result</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Response is passed to error_handler function.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_registered_routes", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_registered_routes", "kind": "function", "doc": "<p>List routes that have been registed at Kong.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.is_microservice_registered", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.is_microservice_registered", "kind": "function", "doc": "<p>List routes that have been registed at Kong.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>microservice [str]:</strong>  Service associated with microservice\nregistered on Pumpwood Kong.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Return true if microservice is registered.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">microservice</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_registered_endpoints", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_registered_endpoints", "kind": "function", "doc": "<p>List routes that have been registed at Kong.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.dummy_call", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.dummy_call", "kind": "function", "doc": "<p>Return a dummy call to ensure headers and payload reaching app.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n\n<h6 id=\"kwards\">Kwards:</h6>\n\n<blockquote>\n  <p>payload (dict]): Payload to be returned by the dummy call\n      end-point.\n  auth_header (dict): Auth header if microservice not logged.</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Return a dictonary with:</p>\n  \n  <ul>\n  <li>full_path (dict): Full path of the request.</li>\n  <li>method (dict): Method used at the call</li>\n  <li>headers (dict): Headers at the request.</li>\n  <li>data (dict): Post payload sent at the request.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.dummy_raise", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.dummy_raise", "kind": "function", "doc": "<p>Raise an Pumpwood error with the payload.</p>\n\n<p>Can be used for debug purposes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exception_class (str):</strong>  Class of the exception to be raised.</li>\n<li><strong>exception_deep (int):</strong>  Deep of the exception in microservice\ncalls.</li>\n</ul>\n\n<h6 id=\"kwards\">Kwards:</h6>\n\n<blockquote>\n  <p>payload (dict]): Payload to be returned by the dummy call\n      end-point.\n  auth_header (dict): Auth header if microservice not logged.</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Should not return any results, all possible call should result\n  in raising the correspondent error.</p>\n</blockquote>\n\n<h6 id=\"exceptions\">Exceptions:</h6>\n\n<blockquote>\n  <p>Should raise the correspondent error passed on exception_class\n  arg, with payload.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">exception_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exception_deep</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.get_pks_from_unique_field", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.get_pks_from_unique_field", "kind": "function", "doc": "<p>Get pk using unique fields values.</p>\n\n<p>Use unique field values to retrieve pk of the objects.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class [str]:</strong>  Model class of the objects.</li>\n<li><strong>field [str]:</strong>  Unique field to fetch pk.</li>\n<li><strong>values [List[Any]]:</strong>  List of the unique fields used to fetch\nprimary keys.</li>\n</ul>\n\n<p>Return [pd.DataFrame]:\n    Return a dataframe in same order as values with columns:\n        - pk: correspondent primary key of the unique value.\n        - [field]: Column with same name of field argument,\n            correspondent to pk.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list", "kind": "function", "doc": "<p>List objects with pagination.</p>\n\n<p>Function to post at list end-point (resumed data) of PumpWood like\nsystems, results will be paginated. To get next pag, send recived pk at\nexclude dict (ex.: exclude_dict={id__in: [1,2,...,30]}).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class of the end-point</li>\n<li><strong>filter_dict (dict):</strong>  Filter dict to be used at the query\n(objects.filter arguments).</li>\n<li><strong>exclude_dict (dict):</strong>   Exclude dict to be used at the query\n(objects.exclude arguments).</li>\n<li><strong>order_by (list):</strong>  Ordering list to be used at the query\n(objects.order_by arguments).</li>\n<li><strong>auth_header(dict):</strong>  Dictionary containing the auth header.</li>\n<li><strong>fields(list[str]):</strong>  Select the fields to be returned by the list\nend-point.</li>\n<li><strong>default_fields [bool]:</strong>  Return the fields specified at\nself.list_fields.</li>\n<li><strong>limit [int]:</strong>  Set the limit of elements of the returned query.</li>\n<li><strong>foreign_key_fields [bool]:</strong>  Return forenging key objects.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Contaiing objects serialized by list Serializer.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_by_chunks", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_by_chunks", "kind": "function", "doc": "<p>List object fetching them by chucks using pk to paginate.</p>\n\n<p>List data by chunck to load by datasets without breaking the backend\nor receive server timeout. It load chunks orderring the results using\nid of the tables, it can be changed but it should be unique otherwise\nunexpected results may occur.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class of the end-point</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>filter_dict (dict) = {}: Filter dict to be used at the query\n    (objects.filter arguments).\n  exclude_dict (dict) = {}:  Exclude dict to be used at the query\n    (objects.exclude arguments).\n  auth_header (dict) = None: Dictionary containing the auth header.\n  fields (list[str]) = None: Select the fields to be returned by the\n    list end-point.\n  default_fields (bool) = False: Return the fields specified at\n      self.list_fields.\n  chuck_size [int]: Number of objects to be fetched each query.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Contaiing objects serialized by list Serializer.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50000</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span> <span class=\"n\">at</span> <span class=\"mh\">0x7a57f70f1a60</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_without_pag", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_without_pag", "kind": "function", "doc": "<p>List object without pagination.</p>\n\n<p>Function to post at list end-point (resumed data) of PumpWood like\nsystems, results won't be paginated.\n<strong>Be carefull with large returns.</strong></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class of the end-point</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>filter_dict (dict): Filter dict to be used at the query\n    (objects.filter arguments)\n  exclude_dict (dict):  Exclude dict to be used at the query\n    (objects.exclude arguments)\n  order_by (list): Ordering list to be used at the query\n    (objects.order_by arguments)\n  auth_header(dict): Dictionary containing the auth header.\n  return_type(str): Set the return type, can be [list, dataframe].\n  convert_geometry(bool) = True: Covert geometry to shapely.\n  fields(list[str]): Select the fields to be returned by the list\n    end-point.\n  default_fields [bool]: Return the fields specified at\n      self.list_fields.\n  foreign_key_fields [bool]: Return forenging key objects.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Contaiing objects serialized by list Serializer.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;list&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">convert_geometry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_dimensions", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_dimensions", "kind": "function", "doc": "<p>List dimensions avaiable for model_class with the filters.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  str\nmodel_class (str): Model class of the end-point</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>filter_dict: dict = {}\n    Filter dict to be used at the query (objects.filter arguments).\n  exclude_dict: dict = {}\n    Exclude dict to be used at the query (objects.exclude arguments).\n  auth_header: dict= {}\n    Dictionary containing the auth header.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list\n    List of keys avaiable in results from the query dict.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_dimension_values", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_dimension_values", "kind": "function", "doc": "<p>List dimensions avaiable for model_class with the filters.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  str\nModel class of the end-point.</li>\n<li><strong>key:</strong>  str\nKey to list the avaiable values using the query filter and exclude.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>filter_dict: dict = {}\n    Filter dict to be used at the query (objects.filter arguments).\n  exclude_dict: dict = {}\n    Exclude dict to be used at the query (objects.exclude arguments).\n  auth_header: dict= {}\n    Dictionary containing the auth header.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list\n    List of keys avaiable in results from the query dict.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_one", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_one", "kind": "function", "doc": "<p>Retrieve an object using list serializer (simple).</p>\n\n<p>Function to get object serialized by retrieve end-point with list\nserializer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class of the end-point</li>\n<li><strong>pk (int):</strong>  Object pk</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Contaiing objects serialized by retrieve Serializer.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">related_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.retrieve", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.retrieve", "kind": "function", "doc": "<p>Retrieve an object from PumpWood.</p>\n\n<p>Function to get object serialized by retrieve end-point\n(more detailed data).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class of the end-point</li>\n<li><strong>pk (int):</strong>  Object pk</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>foreign_key_fields [bool]: Return forenging key objects.\n  related_fields [bool]: Return related fields information.\n  fields [list]:\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Contaiing objects serialized by retrieve Serializer.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">related_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.retrieve_file", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.retrieve_file", "kind": "function", "doc": "<p>Retrieve a file from PumpWood.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Class of the model to retrieve file.</li>\n<li><strong>pk (int):</strong>  Pk of the object associeted file.</li>\n<li><strong>file_field (str):</strong>  Field of the file to be downloaded.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.\n  save_file (bool): If data is to be saved as file or return get\n    response.\n  save_path (str): Path of the directory to save file.\n  file_name (str): Name of the file, if None it will have same name as\n        saved in PumpWood.\n  if_exists {'fail', 'change_name', 'overwrite', 'skip'}: Set what to\n    do if there is a file with same name. Skip will not download file\n    if there is already with same os.path.join(save_path, file_name),\n    file_name must be set for skip argument.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>requset.response or str</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_file</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.retrieve_streaming_file", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.retrieve_streaming_file", "kind": "function", "doc": "<p>Retrieve a file from PumpWood.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Class of the model to retrieve file.</li>\n<li><strong>pk (int):</strong>  Pk of the object associeted file.</li>\n<li><strong>file_field (str):</strong>  Field of the file to be downloaded.</li>\n<li><strong>file_name (str):</strong>  Name of the file, if None it will have same name as\nsaved in PumpWood.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.\n  save_path (str): Path of the directory to save file.\n  if_exists {'fail', 'change_name', 'overwrite'}: Set what to do if\n    there is a file with same name.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>requset.response or str</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.save", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.save", "kind": "function", "doc": "<p>Save or Update a new object.</p>\n\n<p>Function to save or update a new model_class object. If obj_dict{'pk'}\nis None or not defined a new object will be created. The obj\nmodel class is defided at obj_dict['model_class'] and if not defined an\nPumpWoodObjectSavingException will be raised.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj_dict (dict):</strong>  Model data dictionary. It must have 'model_class'\nkey and if 'pk' key is not defined a new object will\nbe created, else object with pk will be updated.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>files (dict): A dictionary of files to be added to as a multi-part\n                post request.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: Updated/Created object data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>PumpWoodObjectSavingException(\n  'To save an object obj_dict must have model_class defined.'):\nWill be raised if model_class key is not present on\nobj_dict dictionary</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj_dict</span>, </span><span class=\"param\"><span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.save_streaming_file", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.save_streaming_file", "kind": "function", "doc": "<p>Stream file to PumpWood.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class of the object.</li>\n<li><strong>pk (int):</strong>  pk of the object.</li>\n<li><strong>file_field (str):</strong>  File field that will receive file stream.</li>\n<li><strong>file (io.BufferedReader):</strong>  File to upload.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>file_name (str): Name of the file, is not set it will be saved as\n      {pk}__{file_field}.{extension at permited extension}\n  auth_header (dict): Authentication dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BufferedReader</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.delete", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.delete", "kind": "function", "doc": "<p>Send delete request to a PumpWood object.</p>\n\n<p>Delete (or whatever the PumpWood system have been implemented) the\nobject with the specified pk.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to delete the object</li>\n<li><strong>pk (int):</strong>  Object pk to be deleted (or whatever the PumpWood system</li>\n<li>have been implemented)</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.s</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dependends on backend implementation</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.remove_file_field", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.remove_file_field", "kind": "function", "doc": "<p>Send delete request to a PumpWood object.</p>\n\n<p>Delete (or whatever the PumpWood system have been implemented) the\nobject with the specified pk.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to delete the object</li>\n<li><strong>pk (int):</strong>  Object pk to be deleted (or whatever the PumpWood system\nhave been implemented)</li>\n<li><strong>file_field (str):</strong>  File field to be removed.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.s</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dependends on backend implementation</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.delete_many", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.delete_many", "kind": "function", "doc": "<p>Send a post request to a delete objects in a query.</p>\n\n<p>Delete objects in the results of a query.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to delete the object</li>\n<li><strong>filter_dict (dict):</strong>  Dictionary to make filter query.</li>\n<li><strong>exclude_dict (dict):</strong>  Dictionary to make exclude query.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header (dict): Dictionary containing the auth header</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if delete is ok.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_actions", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_actions", "kind": "function", "doc": "<p>Return a list of all actions avaiable at this model class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to list possible actions.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of possible actions and its descriptions</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.execute_action", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.execute_action", "kind": "function", "doc": "<p>Execute action.</p>\n\n<p>If action is static or classfunction no pk\nis necessary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to run action the object</li>\n<li><strong>action (str):</strong>  Action that will be performed.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.\n  parameters(dict): Dictionary with the function parameters.\n  files(list of tuples): A list of tuples with\n                         (file name, [file1, file2, ...]).</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pk (int): Pk of the object that action will be performed over.\n  parameters (dict): Parameter dictionary to use in the action.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>dict:</strong>  Return a dict with four keys:\n<ul>\n<li>result: Result of the action.</li>\n<li>action: Action description.</li>\n<li>parameters: Parameters used to perform action.</li>\n<li>obj: Object over which were performed the action.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.search_options", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.search_options", "kind": "function", "doc": "<p>Return search options.</p>\n\n<p>Returns options to search, like forenging keys and choice fields.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to check search parameters</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: Dictionary with search parameters</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.fill_options", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.fill_options", "kind": "function", "doc": "<p>Return options for object fields.</p>\n\n<p>This function send partial object data and return options to finish\nobject fillment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to check filment options.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>parcial_obj_dict (dict): Partial object data\n  field (str): Get an specific field information\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: Dictionary with possible data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span>,</span><span class=\"param\">\t<span class=\"n\">parcial_obj_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.list_options", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.list_options", "kind": "function", "doc": "<p>Return options to render list views.</p>\n\n<p>This function send partial object data and return options to finish\nobject fillment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to check filment options.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: Dictionary with possible data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.retrieve_options", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.retrieve_options", "kind": "function", "doc": "<p>Return options to render retrieve views.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to check filment options.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: Dictionary with possible data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.fill_validation", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.fill_validation", "kind": "function", "doc": "<p>Return options for object fields.</p>\n\n<p>This function send partial object data and return options to finish\nobject fillment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to check filment options.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>parcial_obj_dict (dict): Partial object data\n  field (str): Get an specific field information\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: Dictionary with possible data.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parcial_obj_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">user_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;api&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.pivot", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.pivot", "kind": "function", "doc": "<p>Pivot object data acording to columns specified.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to be pivoted.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>columns (str): Fields to be used as columns.\n  format (str): Format to be used to convert pandas.DataFrame to\n                dictionary, must be in ['dict','list','series',\n                'split', 'records','index'].\n  filter_dict (dict): Dictionary to to be used in objects.filter\n                      argument (Same as list end-point).\n  exclude_dict (dict): Dictionary to to be used in objects.exclude\n                       argument (Same as list end-point).\n  order_by (list): Dictionary to to be used in objects.order_by\n                   argument (Same as list end-point).\n  variables (list[str]) = None: List of the variables to be returned,\n      if None, the default variables will be returned.\n  show_deleted (bool): If deleted data should be returned.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict or list: Depends on format type used to convert\n                pandas.DataFrame</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;list&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_deleted</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.flat_list_by_chunks", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.flat_list_by_chunks", "kind": "function", "doc": "<p>Use the same end-point as pivot which does not unserialize results.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model class to be pivoted.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>filter_dict (dict): Dictionary to to be used in objects.filter\n                      argument (Same as list end-point).\n  exclude_dict (dict): Dictionary to to be used in objects.exclude\n                       argument (Same as list end-point).\n  fields (list[str]) = None: List of the variables to be returned,\n      if None, the default variables will be returned.\n  show_deleted (bool): If deleted data should be returned.\n  auth_header(dict): Dictionary containing the auth header.\n  chunk_size (int): Limit of data to fetch per call.\n  n_parallel (int): Number of parallel process to perform.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict or list: Depends on format type used to convert\n                pandas.DataFrame</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Dependends on backend implementation</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_deleted</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">create_composite_pk</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.bulk_save", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.bulk_save", "kind": "function", "doc": "<p>Save a list of objects.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class(str):</strong>  Data model class.</li>\n<li><strong>data_to_save(list):</strong>  A list of objects to be saved.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>auth_header(dict): A dictionary with authorization headers.</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>dict['saved_count']: Number of saved objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_to_save</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.flatten_parallel", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.flatten_parallel", "kind": "function", "doc": "<p>Concat all parallel return to one list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parallel_result (list):</strong>  A list of lists to be flated (concatenate\nall lists into one).</li>\n</ul>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>A list with all sub list itens.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parallel_result</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_request_get", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_request_get", "kind": "function", "doc": "<p>Make many [n_parallel] get request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>urls_list (list):</strong>  List of urls to make get requests.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the get request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">urls_list</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.paralell_request_post", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.paralell_request_post", "kind": "function", "doc": "<p>Make many [n_parallel] post request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>urls_list (list<str>):</strong>  List of urls to make get requests.</li>\n<li><strong>data_list (list<any>):</strong>  List of data to be used as post payloads.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the post request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">urls_list</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">data_list</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.paralell_request_delete", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.paralell_request_delete", "kind": "function", "doc": "<p>Make many [n_parallel] delete request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>urls_list (list):</strong>  List of urls to make get requests.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the get request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">urls_list</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_retrieve", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_retrieve", "kind": "function", "doc": "<p>Make many [n_parallel] retrieve request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str, List[str]):</strong>  Model Class to retrieve.</li>\n<li><strong>list_pk (List[int]):</strong>  List of the pks to retrieve.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the retrieve request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_pk</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_retrieve_file", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_retrieve_file", "kind": "function", "doc": "<p>Make many [n_parallel] retrieve request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str, List[str]):</strong>  Model Class to retrieve.</li>\n<li><strong>list_pk (List[int]):</strong>  List of the pks to retrieve.</li>\n<li><strong>file_field (str):</strong>  Indicates the file field to download from.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  save_path (str) = \"./\"\n  save_file (bool) = True: True save file locally, False return\n      file content as bites.\n  list_file_name (List[str]) = None: Set a file name for each file\n      download.\n  if_exists (str) = \"fail\": Set how treat when a file will be saved\n      and there is another at same path. \"fail\" will raise an error;\n      \"overwrite\" will overwrite the file with the new one; \"skip\"\n      when list_file_name is set, check before downloaded it file\n      already exists, if so skip the download.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the retrieve request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">list_pk</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">file_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_file</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">list_file_name</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_list", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_list", "kind": "function", "doc": "<p>Make many [n_parallel] list request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model Class to retrieve.</li>\n<li><strong>list_args_list (list):</strong>  A list of list request args (filter_dict,\nexclude_dict, order_by).</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the retrieve request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_list_without_pag", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_list_without_pag", "kind": "function", "doc": "<p>Make many [n_parallel] list_without_pag request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model Class to retrieve.</li>\n<li><strong>list_args (list):</strong>  A list of list request args\n(filter_dict,exclude_dict,\norder_by).</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the retrieve request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_list_one", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_list_one", "kind": "function", "doc": "<p>Make many [n_parallel] list_one request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str or list<str>):</strong>  Model Class to retrieve.</li>\n<li><strong>list_pk (list):</strong>  List of the pks to retrieve.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the retrieve request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_pk</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_save", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_save", "kind": "function", "doc": "<p>Make many [n_parallel] save requests.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>list_obj_dict (list<dict>):</strong>  List of dictionaries containing\nPumpWood objects (must have at least 'model_class' key)</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the retrieve request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">list_obj_dict</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_delete", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_delete", "kind": "function", "doc": "<p>Make many [n_parallel] delete requests.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model Class to retrieve.</li>\n<li><strong>list_obj_dict (list<dict>):</strong>  List of dictionaries containing\nPumpWood objects (must have at least 'model_class' key)</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the retrieve request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_pk</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_delete_many", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_delete_many", "kind": "function", "doc": "<p>Make many [n_parallel] list_without_pag request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model Class to retrieve.</li>\n<li><strong>list_args (list):</strong>  A list of list request args\n(filter_dict,exclude_dict,\norder_by).</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the retrieve request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">list_args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_execute_action", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_execute_action", "kind": "function", "doc": "<p>Make many [n_parallel] execute_action requests.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str, list(str)):</strong>  Model Class to perform action over,\nor a list of model class o make diferent actions.</li>\n<li><strong>pk (int, list[int]):</strong>  A list of the pks to perform action or a\nsingle pk to perform action with different paraemters.</li>\n<li><strong>action (str, list[str]):</strong>  A list of actions to perform or a single\naction to perform over all pks and parameters.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>parameters (dict, list[dict]): Parameters used to perform actions\n      or a single dict to be used in all actions.\n  n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the retrieve request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_bulk_save", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_bulk_save", "kind": "function", "doc": "<p>Break data_to_save in many parallel requests.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class:</strong>  Model class of the data that will be saved.</li>\n<li><strong>data_to_save(list or pandas.DataFrame):</strong>  Data that will be saved</li>\n</ul>\n\n<h6 id=\"kwards\">Kwards:</h6>\n\n<blockquote>\n  <p>n_parallel(int)=10: Number of parallel jobs to be used.\n  chunksize(int)=1000: Length of each parallel post chunk.\n  auth_header(dict)=None: Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>list: List of the responses of bulk_save.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span>,</span><span class=\"param\">\t<span class=\"n\">data_to_save</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.parallel_pivot", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.parallel_pivot", "kind": "function", "doc": "<p>Make many [n_parallel] pivot request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class (str):</strong>  Model Class to retrieve.</li>\n<li><strong>list_args (list):</strong>  A list of list request args\n(filter_dict,exclude_dict,\norder_by).</li>\n<li><strong>columns (List[str]):</strong>  List of columns at the pivoted table.</li>\n<li><strong>format (str):</strong>  Format of returned table. See pandas.DataFrame\nto_dict args.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>n_parallel (int): Number of simultaneus get requests, if not set\n      get from PUMPWOOD_COMUNICATION__N_PARALLEL env variable, if\n      not set then 4 will be considered.\n  auth_header(dict): Dictionary containing the auth header.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of the pivot request reponses.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No particular raises</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">list_args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">PumpWoodMicroService</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_deleted</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.microservices.PumpWoodMicroService.get_queue_matrix", "modulename": "pumpwood_communication.microservices", "qualname": "PumpWoodMicroService.get_queue_matrix", "kind": "function", "doc": "<p>Download model queue estimation matrix.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">queue_pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_as_excel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.misc", "modulename": "pumpwood_communication.misc", "kind": "module", "doc": "<p>Miscelaneus function to help in development.</p>\n"}, {"fullname": "pumpwood_communication.misc.unpack_dict_columns", "modulename": "pumpwood_communication.misc", "qualname": "unpack_dict_columns", "kind": "function", "doc": "<p>Unpack dictonary columns at a dataframe.</p>\n\n<p>Return a copy of the dataframe with 'columns' unpacked and removed\nfrom result.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>df [pd.DataFrame]:</strong>  Dataframe to unpack the columns.</li>\n<li><strong>columns [list]:</strong>  List of columns to unpack in columns.</li>\n</ul>\n\n<p>Return [pd.DataFrame]:\n    Return a dataframe with dict columns unpacked.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers", "modulename": "pumpwood_communication.serializers", "kind": "module", "doc": "<p>Module serializers.py.</p>\n\n<p>Miscellaneous to help with serializers in communication.</p>\n"}, {"fullname": "pumpwood_communication.serializers.PumpWoodJSONEncoder", "modulename": "pumpwood_communication.serializers", "qualname": "PumpWoodJSONEncoder", "kind": "class", "doc": "<p>PumpWood default serializer.</p>\n", "bases": "simplejson.encoder.JSONEncoder"}, {"fullname": "pumpwood_communication.serializers.PumpWoodJSONEncoder.default", "modulename": "pumpwood_communication.serializers", "qualname": "PumpWoodJSONEncoder.default", "kind": "function", "doc": "<p>Serialize complex objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers.pumpJsonDump", "modulename": "pumpwood_communication.serializers", "qualname": "pumpJsonDump", "kind": "function", "doc": "<p>Dump a Json to python object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">sort_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers.CompositePkBase64Converter", "modulename": "pumpwood_communication.serializers", "qualname": "CompositePkBase64Converter", "kind": "class", "doc": "<p>Convert composite primary keys in base64 dictionary.</p>\n"}, {"fullname": "pumpwood_communication.serializers.CompositePkBase64Converter.dump", "modulename": "pumpwood_communication.serializers", "qualname": "CompositePkBase64Converter.dump", "kind": "function", "doc": "<p>Convert primary keys and composite to a single value.</p>\n\n<p>Treat cases when more than one column are used as primary keys,\nat this cases, a base64 used on url serialization of the dictionary\nis returned.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj:</strong>  SQLAlchemy object.</li>\n<li><strong>primary_keys [list]:</strong>  List of primary keys of the object.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<p>Return [int | str]:\n    If the primary key is unique, return the value of the primary\n        key, if is have more than one column as primary key, return\n        a dictionary of the primary keys encoded as base64 url safe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">primary_keys</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_communication.serializers.CompositePkBase64Converter.load", "modulename": "pumpwood_communication.serializers", "qualname": "CompositePkBase64Converter.load", "kind": "function", "doc": "<p>Convert encoded primary keys to values.</p>\n\n<p>If the primary key is a string, try to transform it to dictionary\ndecoding json base64 to a dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value [int | str]:</strong>  Primary key value as an integer or as a base64\nencoded json dictionary.</li>\n</ul>\n\n<p>Return [int | dict]:\n    Return the primary key as integer if possible, or try to decoded\n    it to a dictionary from a base64 encoded json.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();